generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String                      @id @default(cuid())
  email                      String                      @unique @db.VarChar(255)
  password                   String?                     @db.VarChar(255)
  name                       String                      @db.VarChar(255)
  phone                      String?                     @db.VarChar(20)
  profileImage               String?                     @db.VarChar(500)
  passwordSalt               String?                     @db.VarChar(255)
  passwordHistory            Json?
  saltRounds                 Int?                        @default(12)
  phoneHash                  String?                     @db.VarChar(255)
  encryptedPII               Json?
  encryptionKeyId            String?                     @db.VarChar(50)
  userType                   UserType                    @default(SPPG_USER)
  userRole                   UserRole?
  sppgId                     String?
  emailVerified              DateTime?
  isActive                   Boolean                     @default(true)
  lastLogin                  DateTime?
  twoFactorEnabled           Boolean                     @default(false)
  twoFactorSecret            String?                     @db.VarChar(255)
  lastPasswordChange         DateTime?                   @db.Timestamptz(6)
  failedLoginAttempts        Int                         @default(0)
  lockedUntil                DateTime?                   @db.Timestamptz(6)
  sessionToken               String?                     @db.VarChar(255)
  lastIpAddress              String?                     @db.VarChar(45)
  lastUserAgent              String?
  securityFlags              Json?
  isEmailVerified            Boolean                     @default(false)
  isPhoneVerified            Boolean                     @default(false)
  securityLevel              Int                         @default(1)
  riskScore                  Int                         @default(0)
  firstName                  String?                     @db.VarChar(100)
  lastName                   String?                     @db.VarChar(100)
  jobTitle                   String?                     @db.VarChar(150)
  department                 String?                     @db.VarChar(100)
  location                   String?                     @db.VarChar(255)
  timezone                   String                      @default("Asia/Jakarta") @db.VarChar(50)
  language                   String                      @default("id") @db.VarChar(10)
  nationality                String?                     @db.VarChar(50)
  residenceCountry           String?                     @db.VarChar(50)
  preferredCurrency          String                      @default("IDR") @db.VarChar(3)
  alternateEmail             String?                     @db.VarChar(255)
  workPhone                  String?                     @db.VarChar(20)
  personalPhone              String?                     @db.VarChar(20)
  emergencyContact           String?                     @db.VarChar(255)
  emergencyPhone             String?                     @db.VarChar(20)
  emergencyRelationship      String?                     @db.VarChar(50)
  address                    String?
  emergencyContactHash       String?                     @db.VarChar(255)
  demoStatus                 UserDemoStatus?
  demoExpiresAt              DateTime?
  demoStartedAt              DateTime?
  trialExpiresAt             DateTime?
  platformAccess             Json?
  lastActiveModule           String?
  sessionCount               Int                         @default(0)
  createdAt                  DateTime                    @default(now()) @db.Timestamptz(6)
  updatedAt                  DateTime                    @updatedAt @db.Timestamptz(6)
  blogPosts                  BlogPost[]
  digitalSignatures          DigitalSignature[]          @relation("DocumentSigner")
  documentActivities         DocumentActivity[]          @relation("DocumentActivityUser")
  documentApprovalsGiven     DocumentApproval[]          @relation("DocumentApprover")
  documentCommentsCreated    DocumentComment[]           @relation("CommentAuthor")
  documentCommentsResolved   DocumentComment[]           @relation("CommentResolver")
  documentPermissionsGranted DocumentPermission[]        @relation("DocumentPermissionGranter")
  documentUserPermissions    DocumentPermission[]        @relation("DocumentUserPermissions")
  documentShares             DocumentShare[]             @relation("DocumentSharer")
  documentTemplatesCreated   DocumentTemplate[]          @relation("TemplateCreator")
  documentVersionsCreated    DocumentVersion[]           @relation("DocumentVersionCreator")
  documentsCreated           Document[]                  @relation("DocumentCreator")
  employee                   Employee?
  featureUsages              FeatureUsage[]
  menuPlanTemplatesCreated   MenuPlanTemplate[]
  menuPlansApproved          MenuPlan[]                  @relation("MenuPlanApprover")
  menuPlansCreated           MenuPlan[]                  @relation("MenuPlanCreator")
  menuPlansPublished         MenuPlan[]                  @relation("MenuPlanPublisher")
  menuPlansRejected          MenuPlan[]                  @relation("MenuPlanRejector")
  menuPlansSubmitted         MenuPlan[]                  @relation("MenuPlanSubmitter")
  notificationsCreated       Notification[]              @relation("NotificationCreator")
  notifications              Notification[]
  activityLogs               UserActivity[]
  auditLogs                  UserAuditLog[]
  consents                   UserConsent[]               @relation("UserConsents")
  notificationPreference     UserNotificationPreference?
  onboarding                 UserOnboarding?
  userPermissions            UserPermission[]
  userSessions               UserSession[]
  sppg                       SPPG?                       @relation(fields: [sppgId], references: [id])

  @@index([email, isActive])
  @@index([userType, userRole, isActive])
  @@index([sppgId, isActive, lastLogin])
  @@index([sppgId, userRole])
  @@index([demoStatus, demoExpiresAt])
  @@index([createdAt])
  @@index([lastLogin])
  @@index([failedLoginAttempts, lockedUntil])
  @@index([emailVerified, isActive])
  @@index([securityLevel, riskScore])
  @@map("users")
}

model SPPG {
  id                       String                    @id @default(cuid())
  code                     String                    @unique @db.VarChar(20)
  name                     String                    @db.VarChar(255)
  description              String?
  addressDetail            String                    @db.VarChar(500)
  provinceId               String                    @db.VarChar(50)
  regencyId                String                    @db.VarChar(50)
  districtId               String                    @db.VarChar(50)
  villageId                String                    @db.VarChar(50)
  postalCode               String?                   @db.VarChar(10)
  coordinates              String?                   @db.VarChar(50)
  timezone                 Timezone                  @default(WIB)
  phone                    String                    @db.VarChar(20)
  email                    String                    @db.VarChar(255)
  phoneHash                String?                   @db.VarChar(255)
  emailHash                String?                   @db.VarChar(255)
  picName                  String                    @db.VarChar(255)
  picPosition              String                    @db.VarChar(150)
  picEmail                 String                    @db.VarChar(255)
  picPhone                 String                    @db.VarChar(20)
  picWhatsapp              String?                   @db.VarChar(20)
  picDataHash              String?                   @db.VarChar(255)
  organizationType         OrganizationType
  establishedYear          Int?
  targetRecipients         Int
  maxRadius                Float
  maxTravelTime            Int
  operationStartDate       DateTime
  operationEndDate         DateTime?
  status                   SppgStatus                @default(ACTIVE)
  isDemoAccount            Boolean                   @default(false)
  demoExpiresAt            DateTime?
  demoStartedAt            DateTime?
  demoParentId             String?
  demoMaxBeneficiaries     Int?
  demoAllowedFeatures      String[]
  monthlyBudget            Float?                    @default(50000000)
  yearlyBudget             Float?
  budgetStartDate          DateTime?                 @default(now())
  budgetEndDate            DateTime?
  budgetCurrency           String                    @default("IDR")
  budgetAllocation         Json?
  budgetAutoReset          Boolean                   @default(true)
  budgetAlertThreshold     Float                     @default(80)
  createdAt                DateTime                  @default(now()) @db.Timestamptz(6)
  updatedAt                DateTime                  @updatedAt @db.Timestamptz(6)
  customAllergens          Allergen[]                @relation("CustomAllergens")
  banperRequests           BanperRequest[]
  banperTransactions       BanperTransaction[]
  beneficiaryReceipts      BeneficiaryReceipt[]
  billingCycles            BillingCycle[]
  budgetTracking           BudgetTracking[]          @relation("SppgBudgetTracking")
  caseStudies              CaseStudy[]
  healthScore              CustomerHealthScore?
  dailyFoodSamples         DailyFoodSample[]
  demoAnalytics            DemoAnalytics?
  convertedFromDemo        DemoRequest[]             @relation("ConvertedSppg")
  demoRequests             DemoRequest[]             @relation("DemoSppg")
  departments              Department[]
  digitalSignatures        DigitalSignature[]
  distributionSchedules    DistributionSchedule[]
  documentActivities       DocumentActivity[]
  documentApprovals        DocumentApproval[]
  documentCategories       DocumentCategory[]
  documentComments         DocumentComment[]
  documentPermissions      DocumentPermission[]
  documentShares           DocumentShare[]
  documentTemplates        DocumentTemplate[]
  documentTypeConfigs      DocumentTypeConfig[]
  documentVersions         DocumentVersion[]
  documents                Document[]
  dunningProcesses         DunningProcess[]
  employees                Employee[]
  featureUsages            FeatureUsage[]
  feedback                 Feedback[]
  feedbackAnalytics        FeedbackAnalytics[]
  feedbackSLAs             FeedbackSLA[]
  feedbackStakeholders     FeedbackStakeholder[]
  feedbackTemplates        FeedbackTemplate[]
  foodDistributions        FoodDistribution[]
  foodProductions          FoodProduction[]
  foodSafetyCertifications FoodSafetyCertification[]
  inventoryItems           InventoryItem[]
  invoices                 Invoice[]
  kitchenEquipment         KitchenEquipment[]
  laboratoryTests          LaboratoryTest[]
  leadCaptures             LeadCapture[]
  localFoodAdaptations     LocalFoodAdaptation[]
  menuPlanTemplates        MenuPlanTemplate[]        @relation("MenuPlanTemplateSppg")
  menuPlans                MenuPlan[]                @relation("MenuPlanSppg")
  menuResearch             MenuResearch[]
  notificationCampaigns    NotificationCampaign[]
  notificationTemplates    NotificationTemplate[]
  notifications            Notification[]
  nutritionConsultations   NutritionConsultation[]
  nutritionEducation       NutritionEducation[]
  nutritionPrograms        NutritionProgram[]
  paymentMethods           PaymentMethod[]
  payments                 Payment[]
  performanceAnalytics     PerformanceAnalytics[]
  positions                Position[]
  procurementPlans         ProcurementPlan[]
  procurements             Procurement[]
  productionOptimizations  ProductionOptimization[]
  schoolBeneficiaries      SchoolBeneficiary[] // ✅ NEW: Schools served by this SPPG
  district                 District                  @relation("SppgDistrict", fields: [districtId], references: [id])
  province                 Province                  @relation("SppgProvince", fields: [provinceId], references: [id])
  regency                  Regency                   @relation("SppgRegency", fields: [regencyId], references: [id])
  village                  Village                   @relation("SppgVillage", fields: [villageId], references: [id])
  sppgBenchmarking         SppgBenchmarking[]
  operationalReports       SppgOperationalReport[]
  teamMembers              SppgTeamMember[]
  virtualAccount           SppgVirtualAccount?
  subscriptionChanges      SubscriptionChange[]
  subscriptions            Subscription[]
  supplierContracts        SupplierContract[]        @relation("SupplierContracts")
  supplierEvaluations      SupplierEvaluation[]      @relation("SupplierEvaluations")
  supplierCatalogs         SupplierProduct[]         @relation("SupplierCatalogs")
  suppliers                Supplier[]                @relation("SppgSuppliers")
  supportTickets           SupportTicket[]
  testimonials             Testimonial[]
  trainings                Training[]
  trialSubscription        TrialSubscription?
  usageTracking            UsageTracking[]
  auditLogs                UserAuditLog[]            @relation("SppgAuditLogs")
  users                    User[]
  utilityMonitoring        UtilityMonitoring[]
  vehicleAssignments       VehicleAssignment[]
  vehicleFuelRecords       VehicleFuelRecord[]
  vehicleMaintenance       VehicleMaintenance[]
  vehicles                 Vehicle[]
  wasteManagement          WasteManagement[]
  workSchedules            WorkSchedule[]

  @@index([status, organizationType])
  @@index([provinceId, regencyId, status])
  @@index([createdAt, status])
  @@index([isDemoAccount, demoExpiresAt])
  @@index([code, status])
  @@index([email, phone])
  @@index([establishedYear, organizationType])
  @@index([targetRecipients, status])
  @@index([operationStartDate, operationEndDate])
  @@index([monthlyBudget, budgetCurrency])
  @@map("sppg")
}

model Subscription {
  id                    String               @id @default(cuid())
  sppgId                String
  tier                  SubscriptionTier
  status                SubscriptionStatus   @default(ACTIVE)
  startDate             DateTime             @default(now())
  endDate               DateTime?
  billingDate           DateTime
  maxRecipients         Int
  maxStaff              Int
  maxDistributionPoints Int
  storageGb             Int
  packageId             String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  billingCycles         BillingCycle[]
  revenueRecognition    RevenueRecognition[]
  changes               SubscriptionChange[]
  package               SubscriptionPackage? @relation(fields: [packageId], references: [id])
  sppg                  SPPG                 @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model BudgetTracking {
  id                 String   @id @default(cuid())
  sppgId             String
  month              Int
  year               Int
  allocatedBudget    Float
  spentBudget        Float    @default(0)
  remainingBudget    Float    @default(0)
  proteinSpent       Float    @default(0)
  carbsSpent         Float    @default(0)
  vegetablesSpent    Float    @default(0)
  fruitsSpent        Float    @default(0)
  otherSpent         Float    @default(0)
  utilizationRate    Float    @default(0)
  efficiencyScore    Float    @default(0)
  costPerBeneficiary Float    @default(0)
  lastCalculated     DateTime @default(now())
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  sppg               SPPG     @relation("SppgBudgetTracking", fields: [sppgId], references: [id], onDelete: Cascade)

  @@unique([sppgId, month, year])
  @@map("budget_tracking")
}

model SubscriptionPackage {
  id                    String                       @id @default(cuid())
  name                  String                       @unique
  displayName           String
  description           String
  tier                  SubscriptionTier
  monthlyPrice          Float
  yearlyPrice           Float?
  setupFee              Float                        @default(0)
  maxRecipients         Int
  maxStaff              Int
  maxDistributionPoints Int
  maxMenusPerMonth      Int
  storageGb             Int
  maxReportsPerMonth    Int
  hasAdvancedReporting  Boolean                      @default(false)
  hasNutritionAnalysis  Boolean                      @default(false)
  hasCostCalculation    Boolean                      @default(false)
  hasQualityControl     Boolean                      @default(false)
  hasAPIAccess          Boolean                      @default(false)
  hasCustomBranding     Boolean                      @default(false)
  hasPrioritySupport    Boolean                      @default(false)
  hasTrainingIncluded   Boolean                      @default(false)
  supportLevel          String
  responseTimeSLA       String?
  isActive              Boolean                      @default(true)
  isPopular             Boolean                      @default(false)
  isCustom              Boolean                      @default(false)
  isDemoPackage         Boolean                      @default(false)
  demoDuration          Int?
  demoMaxUsers          Int?
  demoFeatureLimits     Json?
  createdAt             DateTime                     @default(now())
  updatedAt             DateTime                     @updatedAt
  changesFrom           SubscriptionChange[]         @relation("ChangeFromPackage")
  changesTo             SubscriptionChange[]         @relation("ChangeToPackage")
  packageFeatures       SubscriptionPackageFeature[]
  subscriptions         Subscription[]

  @@index([tier, isActive])
  @@map("subscription_packages")
}

model SubscriptionPackageFeature {
  id           String              @id @default(cuid())
  packageId    String
  featureName  String
  featureValue String
  isHighlight  Boolean             @default(false)
  category     String?
  displayOrder Int                 @default(0)
  description  String?
  package      SubscriptionPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@index([packageId, displayOrder])
  @@map("subscription_package_features")
}

model Invoice {
  id                 String               @id @default(cuid())
  sppgId             String
  invoiceNumber      String               @unique
  period             String
  baseAmount         Float
  tax                Float                @default(0)
  discount           Float                @default(0)
  totalAmount        Float
  status             PaymentStatus        @default(PENDING)
  invoiceDate        DateTime             @default(now())
  dueDate            DateTime
  paidDate           DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  billingCycles      BillingCycle[]
  dunningProcesses   DunningProcess[]
  sppg               SPPG                 @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  payments           Payment[]
  revenueRecognition RevenueRecognition[]

  @@index([sppgId, period])
  @@index([status, dueDate])
  @@map("invoices")
}

model Payment {
  id                String         @id @default(cuid())
  paymentNumber     String         @unique
  invoiceId         String
  sppgId            String
  amount            Float
  paymentMethod     String
  paymentProvider   String?
  paymentDate       DateTime?
  status            PaymentStatus  @default(PENDING)
  referenceNumber   String?
  transactionId     String?
  paymentMethodId   String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  invoice           Invoice        @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  paymentMethodUsed PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  sppg              SPPG           @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, status])
  @@index([invoiceId])
  @@index([paymentDate])
  @@map("payments")
}

model UsageTracking {
  id               String            @id @default(cuid())
  sppgId           String
  resourceType     UsageResourceType
  period           String
  currentUsage     Int               @default(0)
  maxAllowed       Int
  percentageUsed   Float             @default(0)
  isOverQuota      Boolean           @default(false)
  warningAt80Sent  Boolean           @default(false)
  warningAt90Sent  Boolean           @default(false)
  warningAt100Sent Boolean           @default(false)
  overageUnits     Int               @default(0)
  overageRate      Float?
  overageAmount    Float             @default(0)
  lastUpdated      DateTime          @default(now())
  createdAt        DateTime          @default(now())
  sppg             SPPG              @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@unique([sppgId, resourceType, period])
  @@index([sppgId, period])
  @@index([resourceType, isOverQuota])
  @@map("usage_tracking")
}

model SubscriptionChange {
  id                 String                   @id @default(cuid())
  sppgId             String
  subscriptionId     String
  changeType         SubscriptionChangeType
  fromTier           SubscriptionTier?
  toTier             SubscriptionTier?
  fromPackageId      String?
  toPackageId        String?
  oldMonthlyPrice    Float?
  newMonthlyPrice    Float?
  oldYearlyPrice     Float?
  newYearlyPrice     Float?
  proratedAmount     Float?
  proratedCredit     Float?
  requestedDate      DateTime                 @default(now())
  effectiveDate      DateTime
  processedAt        DateTime?
  requestedBy        String
  approvedBy         String?
  processedBy        String?
  status             SubscriptionChangeStatus @default(PENDING)
  reason             String?
  notes              String?
  adminNotes         String?
  cancellationReason String?
  retentionOffered   Boolean                  @default(false)
  retentionAccepted  Boolean                  @default(false)
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  fromPackage        SubscriptionPackage?     @relation("ChangeFromPackage", fields: [fromPackageId], references: [id])
  sppg               SPPG                     @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  subscription       Subscription             @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  toPackage          SubscriptionPackage?     @relation("ChangeToPackage", fields: [toPackageId], references: [id])

  @@index([sppgId, status])
  @@index([changeType, status])
  @@index([effectiveDate])
  @@map("subscription_changes")
}

model TrialSubscription {
  id                      String              @id @default(cuid())
  sppgId                  String              @unique
  trialTier               SubscriptionTier    @default(STANDARD)
  trialDays               Int                 @default(14)
  startDate               DateTime            @default(now())
  endDate                 DateTime
  daysRemaining           Int
  isExtended              Boolean             @default(false)
  extensionDays           Int?
  extensionReason         String?
  extendedBy              String?
  extendedAt              DateTime?
  isConverted             Boolean             @default(false)
  convertedAt             DateTime?
  convertedToTier         SubscriptionTier?
  conversionValue         Float?
  onboardingCompleted     Boolean             @default(false)
  firstMenuCreated        Boolean             @default(false)
  firstDeliveryMade       Boolean             @default(false)
  supportTicketsCount     Int                 @default(0)
  welcomeSent             Boolean             @default(false)
  reminder7DaysSent       Boolean             @default(false)
  reminder3DaysSent       Boolean             @default(false)
  reminder1DaySent        Boolean             @default(false)
  expiredNotificationSent Boolean             @default(false)
  exitFeedback            String?
  exitReason              String?
  npsScore                Int?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  notifications           TrialNotification[]
  sppg                    SPPG                @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([endDate, isConverted])
  @@index([trialTier, isConverted])
  @@map("trial_subscriptions")
}

model TrialNotification {
  id               String                @id @default(cuid())
  trialId          String
  notificationType TrialNotificationType
  sentAt           DateTime              @default(now())
  channel          String
  isDelivered      Boolean               @default(true)
  clickedAt        DateTime?
  trial            TrialSubscription     @relation(fields: [trialId], references: [id], onDelete: Cascade)

  @@index([trialId, notificationType])
  @@map("trial_notifications")
}

model BillingCycle {
  id                 String               @id @default(cuid())
  sppgId             String
  subscriptionId     String
  billingPeriod      BillingFrequency     @default(MONTHLY)
  cycleNumber        Int
  cycleStartDate     DateTime
  cycleEndDate       DateTime
  usageStartDate     DateTime
  usageEndDate       DateTime
  baseAmount         Float
  usageCharges       Float                @default(0)
  discountAmount     Float                @default(0)
  taxAmount          Float                @default(0)
  totalAmount        Float
  isProrated         Boolean              @default(false)
  proratedDays       Int?
  proratedAmount     Float?
  status             BillingCycleStatus   @default(PENDING)
  invoiceGenerated   Boolean              @default(false)
  invoiceId          String?
  nextBillingDate    DateTime
  isAutoRenewal      Boolean              @default(true)
  billingNotes       String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  invoice            Invoice?             @relation(fields: [invoiceId], references: [id])
  sppg               SPPG                 @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  subscription       Subscription         @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  revenueRecognition RevenueRecognition[]

  @@unique([sppgId, cycleNumber])
  @@index([status, nextBillingDate])
  @@index([sppgId, billingPeriod])
  @@map("billing_cycles")
}

model PaymentMethod {
  id                    String            @id @default(cuid())
  sppgId                String            @db.VarChar(50)
  type                  PaymentMethodType
  provider              String            @db.VarChar(50)
  displayName           String            @db.VarChar(100)
  maskedNumber          String?           @db.VarChar(30)
  encryptedCardData     String?           @db.VarChar(500)
  tokenizedCardData     String?           @db.VarChar(500)
  encryptedBankData     String?           @db.VarChar(500)
  encryptedWalletData   String?           @db.VarChar(500)
  encryptedGatewayToken String?           @db.VarChar(500)
  gatewayCustomerHash   String?           @db.VarChar(255)
  encryptionKeyVersion  Int?              @default(1)
  isActive              Boolean           @default(true)
  isDefault             Boolean           @default(false)
  isVerified            Boolean           @default(false)
  verifiedAt            DateTime?         @db.Timestamptz(6)
  securityStatus        String            @default("PENDING") @db.VarChar(20)
  riskScore             Int               @default(0)
  successfulPayments    Int               @default(0)
  failedPayments        Int               @default(0)
  lastUsedAt            DateTime?         @db.Timestamptz(6)
  totalAmount           Float             @default(0)
  avgTransactionSize    Float             @default(0)
  complianceChecked     Boolean           @default(false)
  complianceDate        DateTime?         @db.Timestamptz(6)
  pciCompliant          Boolean           @default(false)
  createdAt             DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime          @updatedAt @db.Timestamptz(6)
  sppg                  SPPG              @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  payments              Payment[]

  @@index([sppgId, isActive, isDefault])
  @@index([provider, type, isActive])
  @@index([verifiedAt, securityStatus])
  @@index([isDefault, isVerified, isActive])
  @@index([riskScore, securityStatus])
  @@index([createdAt, sppgId])
  @@map("payment_methods")
}

model DunningProcess {
  id                    String               @id @default(cuid())
  sppgId                String
  invoiceId             String
  currentStage          DunningStage         @default(FIRST_REMINDER)
  status                DunningProcessStatus @default(ACTIVE)
  stagesCompleted       DunningStage[]
  remindersSent         Int                  @default(0)
  lastActionDate        DateTime?
  nextActionDate        DateTime?
  isEscalated           Boolean              @default(false)
  escalatedAt           DateTime?
  escalatedTo           String?
  escalationReason      String?
  suspensionWarningDate DateTime?
  suspendedAt           DateTime?
  isSuspended           Boolean              @default(false)
  resolvedAt            DateTime?
  resolutionType        String?
  resolutionNotes       String?
  resolvedBy            String?
  lastContactDate       DateTime?
  customerResponse      String?
  promiseToPayDate      DateTime?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  dunningActions        DunningAction[]
  invoice               Invoice              @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  sppg                  SPPG                 @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, status])
  @@index([currentStage, nextActionDate])
  @@index([isSuspended])
  @@map("dunning_processes")
}

model DunningAction {
  id                 String         @id @default(cuid())
  dunningProcessId   String
  stage              DunningStage
  actionType         String
  actionDate         DateTime       @default(now())
  recipientEmail     String?
  recipientPhone     String?
  messageSubject     String?
  messageContent     String?
  isDelivered        Boolean        @default(false)
  deliveredAt        DateTime?
  isOpened           Boolean        @default(false)
  openedAt           DateTime?
  isClicked          Boolean        @default(false)
  clickedAt          DateTime?
  customerResponded  Boolean        @default(false)
  responseDate       DateTime?
  responseContent    String?
  wasEffective       Boolean?
  effectivenessNotes String?
  dunningProcess     DunningProcess @relation(fields: [dunningProcessId], references: [id], onDelete: Cascade)

  @@index([dunningProcessId, actionDate])
  @@index([stage, actionType])
  @@map("dunning_actions")
}

model RevenueRecognition {
  id                   String                @id @default(cuid())
  subscriptionId       String
  invoiceId            String?
  billingCycleId       String?
  totalRevenue         Float
  recognizedRevenue    Float                 @default(0)
  deferredRevenue      Float
  remainingRevenue     Float
  recognitionStartDate DateTime
  recognitionEndDate   DateTime
  recognitionDays      Int
  monthlyAmount        Float
  isCompleted          Boolean               @default(false)
  completedAt          DateTime?
  accountingPeriod     String?
  journalEntryId       String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  billingCycle         BillingCycle?         @relation(fields: [billingCycleId], references: [id])
  invoice              Invoice?              @relation(fields: [invoiceId], references: [id])
  subscription         Subscription          @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  scheduleItems        RevenueScheduleItem[]

  @@index([subscriptionId, recognitionStartDate])
  @@index([accountingPeriod])
  @@map("revenue_recognition")
}

model RevenueScheduleItem {
  id                   String             @id @default(cuid())
  revenueRecognitionId String
  scheduleDate         DateTime           @db.Date
  scheduledAmount      Float
  isRecognized         Boolean            @default(false)
  recognizedAt         DateTime?
  accountingMonth      String
  accountingQuarter    String
  revenueRecognition   RevenueRecognition @relation(fields: [revenueRecognitionId], references: [id], onDelete: Cascade)

  @@index([revenueRecognitionId, scheduleDate])
  @@index([accountingMonth])
  @@map("revenue_schedule_items")
}

model SubscriptionMetrics {
  id                       String   @id @default(cuid())
  period                   String
  periodType               String   @default("MONTHLY")
  calculatedAt             DateTime @default(now())
  totalActiveSubscriptions Int      @default(0)
  newSubscriptions         Int      @default(0)
  churnedSubscriptions     Int      @default(0)
  reactivatedSubscriptions Int      @default(0)
  upgrades                 Int      @default(0)
  downgrades               Int      @default(0)
  trialSignups             Int      @default(0)
  trialConversions         Int      @default(0)
  trialConversionRate      Float    @default(0)
  trialExtensions          Int      @default(0)
  monthlyRecurringRevenue  Float    @default(0)
  annualRecurringRevenue   Float    @default(0)
  averageRevenuePerUser    Float    @default(0)
  averageRevenuePerAccount Float    @default(0)
  mrrGrowthRate            Float    @default(0)
  customerGrowthRate       Float    @default(0)
  churnRate                Float    @default(0)
  retentionRate            Float    @default(0)
  customerLifetimeValue    Float    @default(0)
  paybackPeriod            Float    @default(0)
  basicTierCount           Int      @default(0)
  standardTierCount        Int      @default(0)
  proTierCount             Int      @default(0)
  enterpriseTierCount      Int      @default(0)
  successfulPaymentRate    Float    @default(0)
  averageDaysToPay         Float    @default(0)
  overdueInvoicesCount     Int      @default(0)
  createdAt                DateTime @default(now())

  @@unique([period, periodType])
  @@index([period])
  @@map("subscription_metrics")
}

model CustomerHealthScore {
  id                   String   @id @default(cuid())
  sppgId               String   @unique
  healthScore          Float
  scoreCategory        String
  usageScore           Float
  paymentScore         Float
  supportScore         Float
  engagementScore      Float
  isAtRisk             Boolean  @default(false)
  riskFactors          String[]
  riskLevel            String?
  churnProbability     Float?
  expansionProbability Float?
  recommendedActions   String[]
  calculationDate      DateTime @default(now())
  nextCalculation      DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  sppg                 SPPG     @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([healthScore, scoreCategory])
  @@index([isAtRisk, riskLevel])
  @@map("customer_health_scores")
}

model SupportTicket {
  id                   String                  @id @default(cuid())
  ticketNumber         String                  @unique
  sppgId               String
  reportedBy           String?
  title                String
  description          String
  priority             SupportTicketPriority   @default(MEDIUM)
  status               SupportTicketStatus     @default(OPEN)
  category             SupportTicketCategory   @default(GENERAL)
  assignedTo           String?
  assignedAt           DateTime?
  resolvedAt           DateTime?
  resolvedBy           String?
  resolution           String?
  satisfactionRating   Int?
  satisfactionFeedback String?
  responseTime         DateTime?
  resolutionTime       DateTime?
  slaBreached          Boolean                 @default(false)
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  responses            SupportTicketResponse[]
  sppg                 SPPG                    @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, status])
  @@index([status, priority])
  @@index([category, status])
  @@map("support_tickets")
}

model SupportTicketResponse {
  id         String        @id @default(cuid())
  ticketId   String
  message    String
  isInternal Boolean       @default(false)
  authorId   String?
  authorName String
  authorType String        @default("SUPPORT")
  createdAt  DateTime      @default(now())
  ticket     SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId, createdAt])
  @@map("support_ticket_responses")
}

model KnowledgeBase {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  content         String
  summary         String?
  category        String
  tags            String[]
  isPublished     Boolean   @default(false)
  publishedAt     DateTime?
  publishedBy     String?
  viewCount       Int       @default(0)
  helpfulCount    Int       @default(0)
  unhelpfulCount  Int       @default(0)
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([isPublished, category])
  @@index([tags])
  @@map("knowledge_base")
}

model NotificationTemplate {
  id            String           @id @default(cuid())
  name          String           @unique
  templateCode  String           @unique
  title         String
  content       String
  type          NotificationType
  category      String           @default("SYSTEM")
  sppgId        String?
  variables     Json?
  emailEnabled  Boolean          @default(false)
  inAppEnabled  Boolean          @default(true)
  smsEnabled    Boolean          @default(false)
  pushEnabled   Boolean          @default(false)
  isActive      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  sppg          SPPG?            @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([type, isActive])
  @@map("notification_templates")
}

model Notification {
  id          String                 @id @default(cuid())
  userId      String?
  sppgId      String?
  templateId  String?
  title       String
  content     String
  type        NotificationType
  priority    NotificationPriority   @default(NORMAL)
  channels    String[]
  status      NotificationStatus     @default(PENDING)
  isRead      Boolean                @default(false)
  readAt      DateTime?
  isSent      Boolean                @default(false)
  sentAt      DateTime?
  category    NotificationCategory   @default(SYSTEM)
  scheduledAt DateTime?
  entityType  String?
  entityId    String?
  actionUrl   String?
  variables   Json?
  metadata    Json?
  tags        String[]               @default([])
  createdBy   String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  deliveries  NotificationDelivery[]
  creator     User?                  @relation("NotificationCreator", fields: [createdBy], references: [id])
  sppg        SPPG?                  @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  template    NotificationTemplate?  @relation(fields: [templateId], references: [id])
  user        User?                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([sppgId, isRead])
  @@index([type, priority])
  @@map("notifications")
}

model EmailTemplate {
  id          String     @id @default(cuid())
  name        String     @unique
  subject     String
  htmlContent String
  textContent String?
  category    String
  variables   Json?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  emailLogs   EmailLog[]

  @@index([category, isActive])
  @@map("email_templates")
}

model EmailLog {
  id           String         @id @default(cuid())
  templateId   String?
  toEmail      String
  fromEmail    String
  subject      String
  status       String         @default("PENDING")
  provider     String?
  sentAt       DateTime?
  deliveredAt  DateTime?
  openedAt     DateTime?
  clickedAt    DateTime?
  bouncedAt    DateTime?
  errorMessage String?
  retryCount   Int            @default(0)
  entityType   String?
  entityId     String?
  createdAt    DateTime       @default(now())
  template     EmailTemplate? @relation(fields: [templateId], references: [id])

  @@index([toEmail, status])
  @@index([status, sentAt])
  @@map("email_logs")
}

model NotificationDelivery {
  id             String       @id @default(cuid())
  notificationId String
  channel        String
  status         String       @default("PENDING")
  provider       String?
  recipient      String
  sentAt         DateTime?
  deliveredAt    DateTime?
  readAt         DateTime?
  failedAt       DateTime?
  errorMessage   String?
  retryCount     Int          @default(0)
  maxRetries     Int          @default(3)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@index([notificationId, channel])
  @@index([status, sentAt])
  @@map("notification_deliveries")
}

model NotificationCampaign {
  id              String    @id @default(cuid())
  name            String
  description     String?
  sppgId          String
  status          String    @default("DRAFT")
  scheduledAt     DateTime?
  startedAt       DateTime?
  completedAt     DateTime?
  totalRecipients Int       @default(0)
  sentCount       Int       @default(0)
  deliveredCount  Int       @default(0)
  failedCount     Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  sppg            SPPG      @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, status])
  @@map("notification_campaigns")
}

model UserNotificationPreference {
  id                  String   @id @default(cuid())
  userId              String   @unique
  channelPreferences  Json?
  categoryPreferences Json?
  globallyEnabled     Boolean  @default(true)
  quietHours          Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notification_preferences")
}

model AuditLog {
  id            String      @id @default(cuid())
  entityType    String
  entityId      String
  action        AuditAction
  description   String?
  oldValues     Json?
  newValues     Json?
  userId        String?
  userName      String?
  userEmail     String?
  sppgId        String?
  ipAddress     String?
  userAgent     String?
  requestPath   String?
  requestMethod String?
  metadata      Json?
  createdAt     DateTime    @default(now())

  @@index([entityType, entityId])
  @@index([userId, createdAt])
  @@index([sppgId, createdAt])
  @@index([action, createdAt])
  @@map("audit_logs")
}

model InventoryItem {
  id                  String                 @id @default(cuid())
  sppgId              String
  itemName            String
  itemCode            String?
  brand               String?
  category            InventoryCategory
  unit                String
  currentStock        Float                  @default(0)
  minStock            Float
  maxStock            Float
  reorderQuantity     Float?
  lastPrice           Float?
  averagePrice        Float?
  costPerUnit         Float?
  preferredSupplierId String?                @db.VarChar(50)
  legacySupplierName  String?
  supplierContact     String?
  leadTime            Int?
  storageLocation     String
  storageCondition    String?
  hasExpiry           Boolean                @default(false)
  shelfLife           Int?
  calories            Float?
  protein             Float?
  carbohydrates       Float?
  fat                 Float?
  fiber               Float?
  // Vitamins (per 100g)
  vitaminA            Float?
  vitaminB1           Float?
  vitaminB2           Float?
  vitaminB3           Float?
  vitaminB6           Float?
  vitaminB12          Float?
  vitaminC            Float?
  vitaminD            Float?
  vitaminE            Float?
  vitaminK            Float?
  folate              Float?
  // Minerals (per 100g)
  calcium             Float?
  iron                Float?
  magnesium           Float?
  phosphorus          Float?
  potassium           Float?
  sodium              Float?
  zinc                Float?
  selenium            Float?
  iodine              Float?
  isActive            Boolean                @default(true)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  preferredSupplier   Supplier?              @relation("SupplierItems", fields: [preferredSupplierId], references: [id])
  sppg                SPPG                   @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  menuIngredients     MenuIngredient[]
  procurementItems    ProcurementItem[]
  stockMovements      StockMovement[]
  productionUsages    ProductionStockUsage[] // ✅ Track usage in food production for cost calculation

  @@unique([sppgId, itemCode])
  @@index([sppgId, category])
  @@index([category, isActive])
  @@index([currentStock])
  @@map("inventory_items")
}

model StockMovement {
  id              String        @id @default(cuid())
  inventoryId     String
  movementType    MovementType
  quantity        Float
  unit            String
  stockBefore     Float
  stockAfter      Float
  unitCost        Float?
  totalCost       Float?
  referenceType   String?
  referenceId     String?
  referenceNumber String?
  batchNumber     String?
  expiryDate      DateTime?
  notes           String?
  documentUrl     String?
  movedBy         String
  movedAt         DateTime      @default(now())
  approvedBy      String?
  approvedAt      DateTime?
  inventory       InventoryItem @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@index([inventoryId, movedAt])
  @@index([movementType, movedAt])
  @@index([referenceType, referenceId])
  @@map("stock_movements")
}

model ProcurementPlan {
  id               String            @id @default(cuid())
  sppgId           String
  programId        String?
  planName         String
  planMonth        String
  planYear         Int
  planQuarter      Int?
  totalBudget      Float
  allocatedBudget  Float             @default(0)
  usedBudget       Float             @default(0)
  remainingBudget  Float             @default(0)
  proteinBudget    Float?
  carbBudget       Float?
  vegetableBudget  Float?
  fruitBudget      Float?
  otherBudget      Float?
  targetRecipients Int
  targetMeals      Int
  costPerMeal      Float?
  approvalStatus   String            @default("DRAFT")
  submittedBy      String?
  submittedAt      DateTime?
  approvedBy       String?
  approvedAt       DateTime?
  rejectionReason  String?
  notes            String?
  emergencyBuffer  Float?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  program          NutritionProgram? @relation(fields: [programId], references: [id])
  sppg             SPPG              @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  procurements     Procurement[]

  @@index([sppgId, planMonth])
  @@index([approvalStatus])
  @@map("procurement_plans")
}

model Procurement {
  id               String            @id @default(cuid())
  sppgId           String
  planId           String?
  procurementCode  String            @unique
  procurementDate  DateTime          @default(now())
  expectedDelivery DateTime?
  actualDelivery   DateTime?
  supplierId       String            @db.VarChar(50)
  supplierName     String?
  supplierContact  String?
  purchaseMethod   ProcurementMethod
  paymentTerms     String?
  subtotalAmount   Float
  taxAmount        Float             @default(0)
  discountAmount   Float             @default(0)
  shippingCost     Float             @default(0)
  totalAmount      Float
  paidAmount       Float             @default(0)
  paymentStatus    String            @default("UNPAID")
  paymentDue       DateTime?
  status           ProcurementStatus @default(DRAFT)
  deliveryStatus   String            @default("ORDERED")
  qualityGrade     QualityGrade?
  qualityNotes     String?
  receiptNumber    String?
  receiptPhoto     String?
  deliveryPhoto    String?
  invoiceNumber    String?
  deliveryMethod   String?
  transportCost    Float?
  packagingType    String?
  inspectedBy      String?
  inspectedAt      DateTime?
  acceptanceStatus String?
  rejectionReason  String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  items            ProcurementItem[]
  plan             ProcurementPlan?  @relation(fields: [planId], references: [id])
  sppg             SPPG              @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  supplier         Supplier          @relation("SupplierProcurements", fields: [supplierId], references: [id])

  @@index([sppgId, procurementDate])
  @@index([paymentStatus, paymentDue])
  @@index([deliveryStatus])
  @@map("procurements")
}

model ProcurementItem {
  id                 String            @id @default(cuid())
  procurementId      String
  inventoryItemId    String?
  itemName           String
  itemCode           String?
  category           InventoryCategory
  brand              String?
  orderedQuantity    Float
  receivedQuantity   Float?
  unit               String
  pricePerUnit       Float
  totalPrice         Float
  discountPercent    Float             @default(0)
  discountAmount     Float             @default(0)
  finalPrice         Float
  qualityStandard    String?
  qualityReceived    String?
  gradeRequested     String?
  gradeReceived      String?
  expiryDate         DateTime?
  batchNumber        String?
  productionDate     DateTime?
  storageRequirement String?
  isAccepted         Boolean           @default(true)
  rejectionReason    String?
  returnedQuantity   Float             @default(0)
  caloriesPer100g    Float?
  proteinPer100g     Float?
  fatPer100g         Float?
  carbsPer100g       Float?
  notes              String?
  inventoryItem      InventoryItem?    @relation(fields: [inventoryItemId], references: [id])
  procurement        Procurement       @relation(fields: [procurementId], references: [id], onDelete: Cascade)

  @@index([procurementId])
  @@index([category])
  @@map("procurement_items")
}

model NutritionRequirement {
  id               String                     @id @default(cuid())
  ageGroupMin      Int
  ageGroupMax      Int
  gender           String
  activityLevel    String?
  specialCondition String?
  caloriesPerDay   Float
  proteinPerDay    Float
  fatPerDay        Float
  carbsPerDay      Float
  fiberPerDay      Float
  vitaminAPerDay   Float?
  vitaminB1PerDay  Float?
  vitaminB2PerDay  Float?
  vitaminB3PerDay  Float?
  vitaminB6PerDay  Float?
  vitaminB12PerDay Float?
  vitaminCPerDay   Float?
  vitaminDPerDay   Float?
  vitaminEPerDay   Float?
  vitaminKPerDay   Float?
  folatPerDay      Float?
  calciumPerDay    Float?
  phosphorusPerDay Float?
  ironPerDay       Float?
  zincPerDay       Float?
  iodinePerDay     Float?
  seleniumPerDay   Float?
  magnesiumPerDay  Float?
  potassiumPerDay  Float?
  sodiumPerDay     Float?
  referenceSource  String                     @default("KEMENKES_2019")
  applicableRegion String                     @default("INDONESIA")
  referenceYear    Int                        @default(2019)
  isActive         Boolean                    @default(true)
  notes            String?
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  menuCalculations MenuNutritionCalculation[]

  @@index([ageGroupMin, ageGroupMax, gender])
  @@index([isActive])
  @@map("nutrition_requirements")
}

model SchoolBeneficiary {
  id                 String       @id @default(cuid())
  sppgId             String // ✅ CRITICAL FIX: Multi-tenancy isolation
  programId          String
  schoolName         String       @db.VarChar(255)
  schoolCode         String?      @unique @db.VarChar(50) // ✅ Unique constraint
  npsn               String?      @unique @db.VarChar(20) // ✅ Nomor Pokok Sekolah Nasional
  schoolType         SchoolType // ✅ ENUM instead of String
  schoolStatus       SchoolStatus // ✅ ENUM instead of String
  accreditationGrade String?      @db.VarChar(1) // A, B, C
  accreditationYear  Int?
  principalName      String       @db.VarChar(255)
  principalNip       String?      @db.VarChar(30) // Nomor Induk Pegawai
  contactPhone       String       @db.VarChar(20)
  contactEmail       String?      @db.VarChar(255)
  alternatePhone     String?      @db.VarChar(20)
  whatsappNumber     String?      @db.VarChar(20)

  // ✅ Complete Regional Data for reporting
  schoolAddress String
  villageId     String
  districtId    String // ✅ NEW: Kecamatan
  regencyId     String // ✅ NEW: Kabupaten/Kota
  provinceId    String // ✅ NEW: Provinsi
  postalCode    String? @db.VarChar(10)
  coordinates   String? @db.VarChar(50)
  urbanRural    String? @default("URBAN") @db.VarChar(20) // URBAN/RURAL

  // Student Demographics
  totalStudents       Int
  targetStudents      Int
  activeStudents      Int  @default(0)
  students4to6Years   Int  @default(0)
  students7to12Years  Int  @default(0)
  students13to15Years Int  @default(0)
  students16to18Years Int  @default(0)
  maleStudents        Int? @default(0) // ✅ NEW: Gender breakdown
  femaleStudents      Int? @default(0) // ✅ NEW: Gender breakdown

  // Feeding Configuration
  feedingDays   Int[]
  mealsPerDay   Int     @default(1)
  feedingTime   String? @db.VarChar(50)
  breakfastTime String? @db.VarChar(10) // HH:MM format
  lunchTime     String? @db.VarChar(10)
  snackTime     String? @db.VarChar(10)

  // Delivery & Logistics
  deliveryAddress       String
  deliveryContact       String  @db.VarChar(255)
  deliveryPhone         String? @db.VarChar(20)
  deliveryInstructions  String?
  preferredDeliveryTime String? @db.VarChar(50)
  accessRoadCondition   String? @db.VarChar(50) // GOOD/FAIR/POOR
  distanceFromSppg      Float? // ✅ NEW: Distance in KM
  estimatedTravelTime   Int? // ✅ NEW: Minutes

  // Facilities & Infrastructure
  storageCapacity String?             @db.VarChar(100)
  servingMethod   SchoolServingMethod @default(CAFETERIA) // ✅ ENUM
  hasKitchen      Boolean             @default(false)
  hasStorage      Boolean             @default(false)
  hasRefrigerator Boolean             @default(false) // ✅ NEW
  hasCleanWater   Boolean             @default(true)
  hasElectricity  Boolean             @default(true)
  hasHandwashing  Boolean             @default(true) // ✅ NEW
  hasDiningArea   Boolean             @default(false) // ✅ NEW
  diningCapacity  Int? // ✅ NEW: Number of students that can eat at once

  // Budget & Financial
  monthlyBudgetAllocation Float?    @default(0) // ✅ NEW: Budget per month
  budgetPerStudent        Float?    @default(0) // ✅ NEW: Budget per student
  contractStartDate       DateTime? // ✅ NEW: Contract tracking
  contractEndDate         DateTime? // ✅ NEW
  contractValue           Float? // ✅ NEW: Total contract value
  contractNumber          String?   @db.VarChar(100) // ✅ NEW

  // Performance Metrics
  attendanceRate       Float?    @default(0) // ✅ NEW: % kehadiran
  participationRate    Float?    @default(0) // ✅ NEW: % partisipasi makan
  satisfactionScore    Float?    @default(0) // ✅ NEW: Skor kepuasan (0-5)
  lastDistributionDate DateTime? // ✅ NEW: Tracking terakhir distribusi
  lastReportDate       DateTime? // ✅ NEW: Tracking terakhir laporan
  totalDistributions   Int       @default(0) // ✅ NEW: Total kali distribusi
  totalMealsServed     Int       @default(0) // ✅ NEW: Total makanan disajikan

  // Status & Enrollment
  enrollmentDate   DateTime  @default(now())
  isActive         Boolean   @default(true)
  suspendedAt      DateTime?
  suspensionReason String?
  reactivationDate DateTime? // ✅ NEW: Tanggal reaktivasi

  // Special Requirements
  beneficiaryType BeneficiaryType @default(CHILD)
  specialDietary  String[]
  allergyAlerts   String[]
  culturalReqs    String[]
  religiousReqs   String[] // ✅ NEW: Kebutuhan keagamaan

  // Integration & External Systems
  dapodikId        String?   @unique @db.VarChar(50) // ✅ NEW: Dapodik ID
  kemendikbudId    String?   @db.VarChar(50) // ✅ NEW: Kemendikbud ID
  externalSystemId String?   @db.VarChar(100) // ✅ NEW: Other external system
  syncedAt         DateTime? // ✅ NEW: Last sync with external system

  // Notes & Documentation
  notes               String? // ✅ NEW: Internal notes
  specialInstructions String? // ✅ NEW: Special handling
  documents           Json? // ✅ NEW: Document references

  // Audit Trail
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?  @db.VarChar(100) // ✅ NEW: User who created
  updatedBy String?  @db.VarChar(100) // ✅ NEW: User who updated

  // Relations
  foodDistributions FoodDistribution[]
  sppg              SPPG                   @relation(fields: [sppgId], references: [id], onDelete: Cascade) // ✅ NEW: Direct SPPG relation
  program           NutritionProgram       @relation(fields: [programId], references: [id], onDelete: Cascade)
  province          Province               @relation("SchoolProvince", fields: [provinceId], references: [id]) // ✅ NEW
  regency           Regency                @relation("SchoolRegency", fields: [regencyId], references: [id]) // ✅ NEW
  district          District               @relation("SchoolDistrict", fields: [districtId], references: [id]) // ✅ NEW
  village           Village                @relation("SchoolVillage", fields: [villageId], references: [id])
  distributions     SchoolDistribution[]
  reports           SchoolFeedingReport[]
  deliveries        DistributionDelivery[]

  @@unique([sppgId, schoolCode]) // ✅ NEW: Unique per SPPG
  @@index([sppgId, isActive]) // ✅ CRITICAL: Multi-tenancy index
  @@index([programId, isActive])
  @@index([schoolType, isActive])
  @@index([provinceId, regencyId, districtId]) // ✅ NEW: Regional reporting
  @@index([villageId])
  @@index([targetStudents])
  @@index([npsn]) // ✅ NEW: NPSN lookup
  @@index([enrollmentDate])
  @@index([contractEndDate]) // ✅ NEW: Contract expiry monitoring
  @@map("school_beneficiaries")
}

model FoodProduction {
  id                String                 @id @default(cuid())
  sppgId            String
  programId         String
  menuId            String
  productionDate    DateTime
  batchNumber       String                 @unique
  plannedPortions   Int
  actualPortions    Int?
  headCook          String
  assistantCooks    String[]
  supervisorId      String?
  plannedStartTime  DateTime
  plannedEndTime    DateTime
  actualStartTime   DateTime?
  actualEndTime     DateTime?
  targetTemperature Float?
  actualTemperature Float?
  hygieneScore      Int?
  tasteRating       Int?
  appearanceRating  Int?
  textureRating     Int?
  status            ProductionStatus       @default(PLANNED)
  qualityPassed     Boolean?
  rejectionReason   String?
  wasteAmount       Float?
  wasteNotes        String?
  notes             String?
  photos            String[]
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  distributions     FoodDistribution[]
  schedules         DistributionSchedule[] @relation("ProductionSchedules") // ✅ Schedules from this production
  usageRecords      ProductionStockUsage[] // ✅ Stock usage tracking for cost calculation
  menu              NutritionMenu          @relation(fields: [menuId], references: [id], onDelete: Cascade)
  program           NutritionProgram       @relation(fields: [programId], references: [id], onDelete: Cascade)
  sppg              SPPG                   @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  menuAssignments   MenuAssignment[]
  qualityChecks     QualityControl[]

  @@index([sppgId, productionDate])
  @@index([programId, status])
  @@index([status, productionDate])
  @@map("food_productions")
}

model QualityControl {
  id               String         @id @default(cuid())
  productionId     String
  checkType        String
  checkTime        DateTime       @default(now())
  checkedBy        String
  parameter        String
  expectedValue    String?
  actualValue      String
  passed           Boolean
  score            Int?
  severity         String?
  notes            String?
  recommendations  String?
  actionRequired   Boolean        @default(false)
  actionTaken      String?
  actionBy         String?
  actionDate       DateTime?
  followUpRequired Boolean        @default(false)
  followUpDate     DateTime?
  createdAt        DateTime       @default(now())
  production       FoodProduction @relation(fields: [productionId], references: [id], onDelete: Cascade)

  @@index([productionId, checkType])
  @@index([checkType, passed])
  @@map("quality_controls")
}

/// Production Stock Usage Tracking
/// Tracks actual inventory items used during food production for accurate cost calculation
model ProductionStockUsage {
  id              String   @id @default(cuid())
  productionId    String
  inventoryItemId String
  quantityUsed    Float // Actual quantity consumed during production
  unit            String // Unit of measurement (kg, liter, gram, ml, etc.)
  unitCostAtUse   Float // Cost per unit at the time of production (frozen snapshot)
  totalCost       Float // quantityUsed * unitCostAtUse (calculated and stored for performance)
  usedAt          DateTime @default(now()) // When the stock was consumed
  recordedBy      String // User ID who recorded the usage
  notes           String? // Optional notes about the usage (e.g., waste, substitutions)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  production    FoodProduction @relation(fields: [productionId], references: [id], onDelete: Cascade)
  inventoryItem InventoryItem  @relation(fields: [inventoryItemId], references: [id])

  // Indexes for performance
  @@index([productionId]) // Fast lookup by production
  @@index([inventoryItemId]) // Fast lookup by inventory item
  @@index([usedAt]) // Fast lookup by date for reporting
  @@map("production_stock_usage")
}

model FoodDistribution {
  id                        String                 @id @default(cuid())
  sppgId                    String
  programId                 String
  productionId              String?
  distributionDate          DateTime
  distributionCode          String                 @unique
  mealType                  MealType
  distributionPoint         String
  address                   String
  coordinates               String?
  plannedRecipients         Int
  actualRecipients          Int?
  plannedStartTime          DateTime
  plannedEndTime            DateTime
  distributorId             String
  driverId                  String?
  volunteers                String[]
  distributionMethod        DistributionMethod?
  vehicleType               String?
  vehiclePlate              String?
  transportCost             Float?
  fuelCost                  Float?
  otherCosts                Float?
  menuItems                 Json
  totalPortions             Int
  portionSize               Float
  departureTemp             Float?
  arrivalTemp               Float?
  servingTemp               Float?
  status                    DistributionStatus     @default(SCHEDULED)
  actualStartTime           DateTime?
  actualEndTime             DateTime?
  departureTime             DateTime?
  arrivalTime               DateTime?
  completionTime            DateTime?
  foodQuality               QualityGrade?
  hygieneScore              Int?
  packagingCondition        String?
  weatherCondition          String?
  temperature               Float?
  humidity                  Float?
  notes                     String?
  photos                    String[]
  signature                 String?
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  schoolId                  String?
  vehicleId                 String?
  completionNotes           String?
  issuesEncountered         String?
  resolutionNotes           String?
  scheduleId                String?
  totalBeneficiariesReached Int?                   @default(0)
  totalPortionsDelivered    Int?                   @default(0)
  issues                    DistributionIssue[]
  feedback                  Feedback[]
  production                FoodProduction?        @relation(fields: [productionId], references: [id])
  program                   NutritionProgram       @relation(fields: [programId], references: [id], onDelete: Cascade)
  schedule                  DistributionSchedule?  @relation(fields: [scheduleId], references: [id])
  school                    SchoolBeneficiary?     @relation(fields: [schoolId], references: [id])
  sppg                      SPPG                   @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  vehicle                   Vehicle?               @relation("DistributionVehicle", fields: [vehicleId], references: [id])
  vehicleAssignments        VehicleAssignment[]
  deliveries                DistributionDelivery[] // ✅ PHASE 3: Individual delivery tracking

  @@index([sppgId, distributionDate])
  @@index([programId, status])
  @@index([status, distributionDate])
  @@index([distributionPoint])
  @@index([schoolId, distributionDate])
  @@index([vehicleId])
  @@index([scheduleId])
  @@map("food_distributions")
}

model DistributionIssue {
  id                 String           @id @default(cuid())
  distributionId     String
  issueType          IssueType
  severity           IssueSeverity
  description        String
  location           String?
  affectedDeliveries String[]
  reportedAt         DateTime         @default(now())
  reportedBy         String
  resolvedAt         DateTime?
  resolvedBy         String?
  resolutionNotes    String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  distribution       FoodDistribution @relation(fields: [distributionId], references: [id], onDelete: Cascade)

  @@index([distributionId, severity])
  @@index([issueType, resolvedAt])
  @@index([reportedAt])
  @@map("distribution_issues")
}

model Vehicle {
  id                    String               @id @default(cuid())
  sppgId                String
  vehicleName           String
  vehicleType           VehicleType
  vehicleBrand          String?
  vehicleModel          String?
  vehicleYear           Int?
  vehicleColor          String?
  licensePlate          String               @unique
  registrationNo        String?
  ownerName             String?
  registeredDate        DateTime?
  expirationDate        DateTime?
  taxExpiryDate         DateTime?
  ownership             VehicleOwnership     @default(OWNED)
  purchaseDate          DateTime?
  purchasePrice         Float?
  rentalCost            Float?
  ownerContact          String?
  capacity              Int?
  cargoCapacity         Int?
  passengerSeats        Int?
  fuelType              FuelType?
  fuelTankSize          Float?
  fuelEfficiency        Float?
  status                VehicleStatus        @default(AVAILABLE)
  currentLocation       String?
  currentMileage        Int?
  currentDriver         String?
  lastServiceDate       DateTime?
  nextServiceDate       DateTime?
  lastServiceMileage    Int?
  serviceIntervalKm     Int                  @default(5000)
  serviceIntervalDays   Int                  @default(180)
  insuranceProvider     String?
  insurancePolicyNo     String?
  insuranceExpiry       DateTime?
  insuranceCost         Float?
  totalFuelCost         Float                @default(0)
  totalMaintenanceCost  Float                @default(0)
  totalDistanceTraveled Float                @default(0)
  totalTrips            Int                  @default(0)
  photoUrl              String?
  stnkDocument          String?
  insuranceDoc          String?
  purchaseDoc           String?
  notes                 String?
  isActive              Boolean              @default(true)
  retiredDate           DateTime?
  retiredReason         String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  distributions         FoodDistribution[]   @relation("DistributionVehicle")
  assignments           VehicleAssignment[]
  fuelRecords           VehicleFuelRecord[]
  maintenanceRecords    VehicleMaintenance[]
  sppg                  SPPG                 @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, status])
  @@index([licensePlate])
  @@index([vehicleType, status])
  @@index([sppgId, isActive])
  @@map("vehicles")
}

model VehicleMaintenance {
  id              String    @id @default(cuid())
  vehicleId       String
  sppgId          String
  maintenanceType String
  maintenanceDate DateTime
  mileage         Int?
  workshopName    String?
  workshopAddress String?
  workshopContact String?
  description     String
  partsReplaced   String[]
  laborCost       Float?
  partsCost       Float?
  totalCost       Float
  invoiceNumber   String?
  invoiceDoc      String?
  photos          String[]
  nextServiceDate DateTime?
  nextServiceKm   Int?
  status          String    @default("COMPLETED")
  performedBy     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  sppg            SPPG      @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  vehicle         Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([vehicleId, maintenanceDate])
  @@index([sppgId, maintenanceDate])
  @@map("vehicle_maintenance")
}

model VehicleFuelRecord {
  id                    String   @id @default(cuid())
  vehicleId             String
  sppgId                String
  fuelDate              DateTime @default(now())
  fuelType              FuelType
  fuelAmount            Float
  pricePerLiter         Float
  totalCost             Float
  mileage               Int?
  location              String?
  distributionId        String?
  distanceSinceLastFuel Float?
  fuelEfficiency        Float?
  receiptPhoto          String?
  odometerPhoto         String?
  notes                 String?
  paidBy                String
  paymentMethod         String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  sppg                  SPPG     @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  vehicle               Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([vehicleId, fuelDate])
  @@index([sppgId, fuelDate])
  @@map("vehicle_fuel_records")
}

model VehicleAssignment {
  id              String                @id @default(cuid())
  vehicleId       String
  distributionId  String?
  scheduleId      String?
  sppgId          String
  assignedDate    DateTime              @default(now())
  startTime       DateTime
  endTime         DateTime?
  driverId        String
  helpers         String[]
  startMileage    Int?
  endMileage      Int?
  startFuel       Float?
  endFuel         Float?
  startLocation   String
  endLocation     String
  waypointsCount  Int?
  totalDistance   Float?
  fuelUsed        Float?
  fuelCost        Float?
  tollCost        Float?
  parkingCost     Float?
  otherCosts      Float?
  totalCost       Float?
  status          String                @default("ASSIGNED")
  checklistBefore Json?
  checklistAfter  Json?
  notes           String?
  issues          String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  distribution    FoodDistribution?     @relation(fields: [distributionId], references: [id])
  schedule        DistributionSchedule? @relation("ScheduleVehicles", fields: [scheduleId], references: [id])
  sppg            SPPG                  @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  vehicle         Vehicle               @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@index([vehicleId, assignedDate])
  @@index([distributionId])
  @@index([scheduleId])
  @@index([sppgId, assignedDate])
  @@index([driverId])
  @@map("vehicle_assignments")
}

model MenuNutritionCalculation {
  id                      String                @id @default(cuid())
  menuId                  String                @unique
  requirementId           String?
  totalCalories           Float                 @default(0)
  totalProtein            Float                 @default(0)
  totalCarbs              Float                 @default(0)
  totalFat                Float                 @default(0)
  totalFiber              Float                 @default(0)
  totalVitaminA           Float                 @default(0)
  totalVitaminB1          Float                 @default(0)
  totalVitaminB2          Float                 @default(0)
  totalVitaminB3          Float                 @default(0)
  totalVitaminB6          Float                 @default(0)
  totalVitaminB12         Float                 @default(0)
  totalVitaminC           Float                 @default(0)
  totalVitaminD           Float                 @default(0)
  totalVitaminE           Float                 @default(0)
  totalVitaminK           Float                 @default(0)
  totalFolate             Float                 @default(0)
  totalCalcium            Float                 @default(0)
  totalPhosphorus         Float                 @default(0)
  totalIron               Float                 @default(0)
  totalZinc               Float                 @default(0)
  totalIodine             Float                 @default(0)
  totalSelenium           Float                 @default(0)
  totalMagnesium          Float                 @default(0)
  totalPotassium          Float                 @default(0)
  totalSodium             Float                 @default(0)
  caloriesDV              Float                 @default(0)
  proteinDV               Float                 @default(0)
  carbsDV                 Float                 @default(0)
  fatDV                   Float                 @default(0)
  fiberDV                 Float                 @default(0)
  meetsCalorieAKG         Boolean               @default(false)
  meetsProteinAKG         Boolean               @default(false)
  meetsAKG                Boolean               @default(false)
  excessNutrients         String[]
  deficientNutrients      String[]
  adequateNutrients       String[]
  calculatedAt            DateTime              @default(now())
  calculatedBy            String?
  calculationMethod       String                @default("AUTO")
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  ingredientsLastModified DateTime?
  isStale                 Boolean               @default(false)
  staleReason             String?
  menu                    NutritionMenu         @relation(fields: [menuId], references: [id], onDelete: Cascade)
  requirement             NutritionRequirement? @relation(fields: [requirementId], references: [id])

  @@index([menuId])
  @@index([meetsAKG])
  @@index([calculatedAt])
  @@index([isStale])
  @@map("menu_nutrition_calculations")
}

model MenuCostCalculation {
  id                      String        @id @default(cuid())
  menuId                  String        @unique
  totalIngredientCost     Float         @default(0)
  ingredientBreakdown     Json?
  laborCostPerHour        Float         @default(0)
  preparationHours        Float         @default(0)
  cookingHours            Float         @default(0)
  totalLaborCost          Float         @default(0)
  gasCost                 Float         @default(0)
  electricityCost         Float         @default(0)
  waterCost               Float         @default(0)
  totalUtilityCost        Float         @default(0)
  packagingCost           Float         @default(0)
  equipmentCost           Float         @default(0)
  cleaningCost            Float         @default(0)
  overheadPercentage      Float         @default(15)
  overheadCost            Float         @default(0)
  totalDirectCost         Float         @default(0)
  totalIndirectCost       Float         @default(0)
  grandTotalCost          Float         @default(0)
  plannedPortions         Int           @default(1)
  costPerPortion          Float         @default(0)
  ingredientCostRatio     Float         @default(0)
  laborCostRatio          Float         @default(0)
  overheadCostRatio       Float         @default(0)
  costOptimizations       String[]
  alternativeIngredients  String[]
  calculatedAt            DateTime      @default(now())
  calculatedBy            String?
  calculationMethod       String        @default("AUTO")
  isActive                Boolean       @default(true)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  budgetAllocation        Float?
  ingredientsLastModified DateTime?
  isStale                 Boolean       @default(false)
  staleReason             String?
  menu                    NutritionMenu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@index([menuId])
  @@index([costPerPortion])
  @@index([calculatedAt])
  @@index([isStale])
  @@map("menu_cost_calculations")
}

model Department {
  id               String       @id @default(cuid())
  sppgId           String
  departmentCode   String
  departmentName   String
  description      String?
  parentId         String?
  managerId        String?
  budgetAllocated  Float?
  maxEmployees     Int?
  currentEmployees Int          @default(0)
  email            String?
  phone            String?
  location         String?
  isActive         Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  parent           Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children         Department[] @relation("DepartmentHierarchy")
  sppg             SPPG         @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  employees        Employee[]
  positions        Position[]

  @@unique([sppgId, departmentCode])
  @@index([sppgId, isActive])
  @@index([parentId])
  @@map("departments")
}

model Position {
  id               String        @id @default(cuid())
  sppgId           String
  departmentId     String
  positionCode     String
  positionName     String
  jobDescription   String?
  requirements     String[]
  responsibilities String[]
  level            EmployeeLevel @default(STAFF)
  reportsTo        String?
  minSalary        Float?
  maxSalary        Float?
  currency         String        @default("IDR")
  maxOccupants     Int           @default(1)
  currentOccupants Int           @default(0)
  isActive         Boolean       @default(true)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  employees        Employee[]
  department       Department    @relation(fields: [departmentId], references: [id])
  sppg             SPPG          @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@unique([sppgId, positionCode])
  @@index([sppgId, departmentId])
  @@index([level, isActive])
  @@map("positions")
}

model Employee {
  id                       String                  @id @default(cuid())
  sppgId                   String
  userId                   String?                 @unique
  employeeId               String                  @unique
  employeeCode             String?
  fullName                 String
  nickname                 String?
  nik                      String?                 @unique
  dateOfBirth              DateTime
  placeOfBirth             String?
  gender                   Gender
  religion                 String?
  maritalStatus            MaritalStatus           @default(SINGLE)
  bloodType                String?
  nationality              String                  @default("Indonesian")
  phone                    String?
  email                    String?
  personalEmail            String?
  addressDetail            String
  villageId                String
  postalCode               String?
  emergencyContactName     String?
  emergencyContactPhone    String?
  emergencyContactRelation String?
  departmentId             String
  positionId               String
  employmentType           EmploymentType          @default(PERMANENT)
  employmentStatus         EmploymentStatus        @default(PROBATION)
  joinDate                 DateTime
  probationEndDate         DateTime?
  contractStartDate        DateTime?
  contractEndDate          DateTime?
  terminationDate          DateTime?
  terminationReason        String?
  directSupervisor         String?
  workLocation             String?
  workScheduleId           String?
  basicSalary              Float?
  currency                 String                  @default("IDR")
  salaryGrade              String?
  taxId                    String?
  bankAccount              String?
  bankName                 String?
  bankBranch               String?
  photoUrl                 String?
  biography                String?
  skills                   String[]
  languages                String[]
  isActive                 Boolean                 @default(true)
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  disciplinaryActions      DisciplinaryAction[]
  attendances              EmployeeAttendance[]
  certifications           EmployeeCertification[]
  documents                EmployeeDocument[]
  trainings                EmployeeTraining[]
  department               Department              @relation(fields: [departmentId], references: [id])
  position                 Position                @relation(fields: [positionId], references: [id])
  sppg                     SPPG                    @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  user                     User?                   @relation(fields: [userId], references: [id])
  village                  Village                 @relation("EmployeeVillage", fields: [villageId], references: [id])
  workSchedule             WorkSchedule?           @relation(fields: [workScheduleId], references: [id])
  leaveBalances            LeaveBalance[]
  leaveRequests            LeaveRequest[]
  payrolls                 Payroll[]
  performanceReviews       PerformanceReview[]
  teamMemberships          SppgTeamMember[]

  @@index([sppgId, employmentStatus])
  @@index([departmentId, positionId])
  @@index([employmentStatus, isActive])
  @@index([joinDate])
  @@map("employees")
}

model WorkSchedule {
  id               String     @id @default(cuid())
  sppgId           String
  scheduleName     String
  description      String?
  mondayStart      String?
  mondayEnd        String?
  tuesdayStart     String?
  tuesdayEnd       String?
  wednesdayStart   String?
  wednesdayEnd     String?
  thursdayStart    String?
  thursdayEnd      String?
  fridayStart      String?
  fridayEnd        String?
  saturdayStart    String?
  saturdayEnd      String?
  sundayStart      String?
  sundayEnd        String?
  breakDuration    Int        @default(60)
  lunchBreakStart  String?
  lunchBreakEnd    String?
  hoursPerWeek     Float      @default(40)
  workDaysPerWeek  Int        @default(5)
  overtimeAllowed  Boolean    @default(true)
  maxOvertimeDaily Float      @default(4)
  flexibleHours    Boolean    @default(false)
  coreHoursStart   String?
  coreHoursEnd     String?
  isActive         Boolean    @default(true)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  employees        Employee[]
  sppg             SPPG       @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, isActive])
  @@map("work_schedules")
}

model SchoolDistribution {
  id                String                @id @default(cuid())
  programId         String
  schoolId          String
  menuId            String
  distributionDate  DateTime
  targetQuantity    Int
  actualQuantity    Int                   @default(0)
  schoolName        String
  targetStudents    Int
  menuName          String
  portionSize       Float
  totalWeight       Float                 @default(0)
  costPerPortion    Float                 @default(0)
  totalCost         Float                 @default(0)
  budgetAllocated   Float?
  deliveryTime      DateTime?
  deliveryAddress   String
  deliveryContact   String
  deliveryStatus    String                @default("PLANNED")
  temperatureCheck  Boolean               @default(false)
  foodTemperature   Float?
  qualityStatus     String?
  qualityNotes      String?
  receivedBy        String?
  receivedAt        DateTime?
  signature         String?
  photos            String[]
  schoolFeedback    String?
  satisfactionScore Int?
  issues            String[]
  needsFollowUp     Boolean               @default(false)
  followUpNotes     String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  menu              NutritionMenu         @relation(fields: [menuId], references: [id])
  program           NutritionProgram      @relation(fields: [programId], references: [id], onDelete: Cascade)
  school            SchoolBeneficiary     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  reports           SchoolFeedingReport[]

  @@index([programId, distributionDate])
  @@index([schoolId, distributionDate])
  @@index([deliveryStatus])
  @@map("school_distributions")
}

model SchoolFeedingReport {
  id                    String             @id @default(cuid())
  distributionId        String
  schoolId              String
  reportDate            DateTime           @default(now())
  reportType            String             @default("DAILY")
  totalStudentsServed   Int
  totalPortionsServed   Int
  totalPortionsConsumed Int
  wastePercentage       Float              @default(0)
  attendanceRate        Float              @default(0)
  participationRate     Float              @default(0)
  foodTemperature       Float?
  tasteRating           Float?
  presentationRating    Float?
  overallRating         Float?
  studentFeedback       String[]
  teacherFeedback       String[]
  nutritionObservations String[]
  issuesReported        String[]
  actionsRequired       String[]
  recommendationsNext   String[]
  healthObservations    String?
  energyLevels          String?
  concentrationLevels   String?
  reportedBy            String
  reviewedBy            String?
  reviewNotes           String?
  reportStatus          String             @default("SUBMITTED")
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  distribution          SchoolDistribution @relation(fields: [distributionId], references: [id], onDelete: Cascade)
  school                SchoolBeneficiary  @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  @@index([schoolId, reportDate])
  @@index([distributionId])
  @@index([reportType, reportDate])
  @@map("school_feeding_reports")
}

model ProgramMonitoring {
  id                    String           @id @default(cuid())
  programId             String
  monitoringMonth       String
  monitoringYear        Int
  reportingWeek         Int?
  reportedBy            String
  reportDate            DateTime         @default(now())
  targetRecipients      Int
  enrolledRecipients    Int
  activeRecipients      Int
  dropoutCount          Int
  newEnrollments        Int
  attendanceRate        Float
  assessmentsCompleted  Int              @default(0)
  improvedNutrition     Int              @default(0)
  stableNutrition       Int              @default(0)
  worsenedNutrition     Int              @default(0)
  criticalCases         Int              @default(0)
  feedingDaysPlanned    Int
  feedingDaysCompleted  Int
  menuVariety           Int
  stockoutDays          Int
  qualityIssues         Int
  totalMealsProduced    Int
  totalMealsDistributed Int
  wastePercentage       Float
  productionEfficiency  Float
  budgetAllocated       Float
  budgetUtilized        Float
  budgetUtilization     Float
  costPerRecipient      Float
  costPerMeal           Float
  savings               Float
  avgQualityScore       Float
  customerSatisfaction  Float
  complaintCount        Int              @default(0)
  complimentCount       Int              @default(0)
  foodSafetyIncidents   Int              @default(0)
  hygieneScore          Float?
  temperatureCompliance Float?
  staffAttendance       Float
  trainingCompleted     Int
  majorChallenges       String[]
  minorIssues           String[]
  resourceConstraints   String[]
  achievements          String[]
  bestPractices         String[]
  innovations           String[]
  recommendedActions    String[]
  priorityAreas         String[]
  resourceNeeds         String[]
  nextMonthTargets      String[]
  improvementPlans      String[]
  parentFeedback        String?
  teacherFeedback       String?
  communityFeedback     String?
  governmentFeedback    String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  program               NutritionProgram @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@index([programId, monitoringMonth])
  @@index([monitoringMonth, monitoringYear])
  @@map("program_monitoring")
}

model NutritionProgram {
  id                  String               @id @default(cuid())
  sppgId              String
  name                String
  description         String?
  programCode         String               @unique
  programType         ProgramType
  targetGroup         TargetGroup
  calorieTarget       Float?
  proteinTarget       Float?
  carbTarget          Float?
  fatTarget           Float?
  fiberTarget         Float?
  startDate           DateTime
  endDate             DateTime?
  feedingDays         Int[]
  mealsPerDay         Int                  @default(1)
  totalBudget         Float?
  budgetPerMeal       Float?
  targetRecipients    Int
  currentRecipients   Int                  @default(0)
  implementationArea  String
  partnerSchools      String[]
  status              ProgramStatus        @default(ACTIVE)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  feedback            Feedback[]
  distributions       FoodDistribution[]
  productions         FoodProduction[]
  menuPlans           MenuPlan[]
  menus               NutritionMenu[]
  sppg                SPPG                 @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  procurementPlans    ProcurementPlan[]
  monitoring          ProgramMonitoring[]
  schools             SchoolBeneficiary[]
  schoolDistributions SchoolDistribution[]

  @@index([sppgId, status])
  @@index([programType, status])
  @@index([startDate, endDate])
  @@map("nutrition_programs")
}

model NutritionMenu {
  id                          String                    @id @default(cuid())
  programId                   String
  menuName                    String
  menuCode                    String
  description                 String?
  mealType                    MealType
  servingSize                 Int
  costPerServing              Float
  cookingTime                 Int?
  preparationTime             Int?
  batchSize                   Int?
  budgetAllocation            Float?
  allergens                   String[]
  isHalal                     Boolean                   @default(true)
  isVegetarian                Boolean                   @default(false)
  nutritionStandardCompliance Boolean                   @default(false)
  isActive                    Boolean                   @default(true)
  createdAt                   DateTime                  @default(now())
  updatedAt                   DateTime                  @updatedAt
  difficulty                  MenuDifficulty?
  cookingMethod               CookingMethod?
  isVegan                     Boolean                   @default(false)
  feedback                    Feedback[]
  productions                 FoodProduction[]
  menuAssignments             MenuAssignment[]
  costCalc                    MenuCostCalculation?
  ingredients                 MenuIngredient[]
  nutritionCalc               MenuNutritionCalculation?
  program                     NutritionProgram          @relation(fields: [programId], references: [id], onDelete: Cascade)
  recipeSteps                 RecipeStep[]
  schoolDistributions         SchoolDistribution[]

  @@unique([programId, menuCode])
  @@index([programId, isActive])
  @@index([mealType, isActive])
  @@map("nutrition_menus")
}

model MenuIngredient {
  id               String        @id @default(cuid())
  menuId           String
  inventoryItemId  String // ✅ REQUIRED - Must link to inventory
  quantity         Float // Quantity per 100g serving
  preparationNotes String?
  isOptional       Boolean       @default(false)
  substitutes      String[]
  inventoryItem    InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Restrict)
  menu             NutritionMenu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@index([menuId])
  @@index([inventoryItemId])
  @@map("menu_ingredients")
}

model RecipeStep {
  id           String        @id @default(cuid())
  menuId       String
  stepNumber   Int
  title        String?
  instruction  String
  duration     Int?
  temperature  Float?
  equipment    String[]
  qualityCheck String?
  imageUrl     String?
  videoUrl     String?
  menu         NutritionMenu @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@unique([menuId, stepNumber])
  @@index([menuId, stepNumber])
  @@map("recipe_steps")
}

model Allergen {
  id          String   @id @default(cuid())
  sppgId      String?
  name        String   @db.VarChar(100)
  description String?
  isCommon    Boolean  @default(true)
  category    String?  @db.VarChar(50)
  localName   String?  @db.VarChar(100)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  sppg        SPPG?    @relation("CustomAllergens", fields: [sppgId], references: [id], onDelete: Cascade)

  @@unique([sppgId, name])
  @@index([sppgId, isActive])
  @@index([isCommon, isActive])
  @@index([category, isActive])
  @@map("allergens")
}

model MenuPlan {
  id                      String             @id @default(cuid())
  programId               String
  sppgId                  String
  createdBy               String
  approvedBy              String?
  name                    String
  description             String?
  startDate               DateTime
  endDate                 DateTime
  status                  MenuPlanStatus     @default(DRAFT)
  isDraft                 Boolean            @default(true)
  isActive                Boolean            @default(false)
  isArchived              Boolean            @default(false)
  publishedAt             DateTime?
  archivedAt              DateTime?
  totalDays               Int                @default(0)
  totalMenus              Int                @default(0)
  averageCostPerDay       Float              @default(0)
  totalEstimatedCost      Float              @default(0)
  nutritionScore          Float?
  varietyScore            Float?
  costEfficiency          Float?
  meetsNutritionStandards Boolean            @default(false)
  meetsbudgetConstraints  Boolean            @default(false)
  planningRules           Json?
  generationMetadata      Json?
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  approvedAt              DateTime?
  publishedBy             String?
  rejectedAt              DateTime?
  rejectedBy              String?
  rejectionReason         String?
  submittedAt             DateTime?
  submittedBy             String?
  assignments             MenuAssignment[]
  templates               MenuPlanTemplate[]
  approver                User?              @relation("MenuPlanApprover", fields: [approvedBy], references: [id])
  creator                 User               @relation("MenuPlanCreator", fields: [createdBy], references: [id])
  program                 NutritionProgram   @relation(fields: [programId], references: [id], onDelete: Cascade)
  publishedByUser         User?              @relation("MenuPlanPublisher", fields: [publishedBy], references: [id])
  rejectedByUser          User?              @relation("MenuPlanRejector", fields: [rejectedBy], references: [id])
  sppg                    SPPG               @relation("MenuPlanSppg", fields: [sppgId], references: [id])
  submittedByUser         User?              @relation("MenuPlanSubmitter", fields: [submittedBy], references: [id])

  @@index([programId, startDate, endDate])
  @@index([sppgId])
  @@index([createdBy])
  @@index([status])
  @@map("menu_plans")
}

model MenuAssignment {
  id              String           @id @default(cuid())
  menuPlanId      String
  menuId          String
  assignedDate    DateTime
  mealType        MealType
  plannedPortions Int              @default(0)
  estimatedCost   Float            @default(0)
  calories        Int              @default(0)
  protein         Float            @default(0)
  carbohydrates   Float            @default(0)
  fat             Float            @default(0)
  isSubstitute    Boolean          @default(false)
  notes           String?
  status          AssignmentStatus @default(PLANNED)
  isProduced      Boolean          @default(false)
  isDistributed   Boolean          @default(false)
  actualPortions  Int?
  actualCost      Float?
  productionId    String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  menu            NutritionMenu    @relation(fields: [menuId], references: [id])
  menuPlan        MenuPlan         @relation(fields: [menuPlanId], references: [id], onDelete: Cascade)
  production      FoodProduction?  @relation(fields: [productionId], references: [id])

  @@unique([menuPlanId, assignedDate, mealType])
  @@index([menuPlanId, assignedDate])
  @@index([menuId])
  @@index([assignedDate])
  @@map("menu_assignments")
}

model MenuPlanTemplate {
  id              String    @id @default(cuid())
  menuPlanId      String
  sppgId          String
  createdBy       String
  name            String
  description     String?
  category        String?
  templatePattern Json
  useCount        Int       @default(0)
  lastUsedAt      DateTime?
  isPublic        Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  creator         User      @relation(fields: [createdBy], references: [id])
  menuPlan        MenuPlan  @relation(fields: [menuPlanId], references: [id], onDelete: Cascade)
  sppg            SPPG      @relation("MenuPlanTemplateSppg", fields: [sppgId], references: [id])

  @@index([sppgId, category])
  @@index([createdBy])
  @@map("menu_plan_templates")
}

model NutritionStandard {
  id            String        @id @default(cuid())
  targetGroup   TargetGroup
  ageGroup      AgeGroup
  gender        Gender?
  activityLevel ActivityLevel @default(MODERATE)
  calories      Int
  protein       Float
  carbohydrates Float
  fat           Float
  fiber         Float
  calcium       Float?
  iron          Float?
  vitaminA      Float?
  vitaminC      Float?
  vitaminD      Float?
  vitaminE      Float?
  folate        Float?
  zinc          Float?
  caloriesMin   Int?
  caloriesMax   Int?
  proteinMin    Float?
  proteinMax    Float?
  source        String?
  referenceYear Int?
  notes         String?
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([targetGroup, ageGroup, gender, activityLevel])
  @@index([targetGroup, ageGroup])
  @@map("nutrition_standards")
}

model EmployeeDocument {
  id             String       @id @default(cuid())
  employeeId     String
  documentType   DocumentType
  documentName   String
  documentNumber String?
  description    String?
  fileUrl        String
  fileName       String
  fileSize       Int?
  mimeType       String?
  issueDate      DateTime?
  expiryDate     DateTime?
  isExpired      Boolean      @default(false)
  isVerified     Boolean      @default(false)
  verifiedBy     String?
  verifiedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  employee       Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
  @@index([expiryDate, isExpired])
  @@map("employee_documents")
}

model EmployeeCertification {
  id                  String    @id @default(cuid())
  employeeId          String
  certificationName   String
  issuingOrganization String
  certificationNumber String?
  description         String?
  issueDate           DateTime
  expiryDate          DateTime?
  isActive            Boolean   @default(true)
  verificationUrl     String?
  certificateUrl      String?
  requiresRenewal     Boolean   @default(false)
  renewalDate         DateTime?
  renewalReminder     DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  employee            Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId, isActive])
  @@index([expiryDate, isActive])
  @@map("employee_certifications")
}

model EmployeeAttendance {
  id                String           @id @default(cuid())
  employeeId        String
  attendanceDate    DateTime         @db.Date
  dayOfWeek         String
  clockIn           DateTime?
  clockOut          DateTime?
  breakStart        DateTime?
  breakEnd          DateTime?
  scheduledHours    Float            @default(8)
  actualHours       Float            @default(0)
  breakHours        Float            @default(1)
  overtimeHours     Float            @default(0)
  status            AttendanceStatus @default(PRESENT)
  attendanceType    String           @default("REGULAR")
  clockInLocation   String?
  clockOutLocation  String?
  clockInMethod     String?
  lateMinutes       Int              @default(0)
  earlyLeaveMinutes Int              @default(0)
  isApproved        Boolean          @default(false)
  approvedBy        String?
  approvedAt        DateTime?
  notes             String?
  adminNotes        String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  employee          Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, attendanceDate])
  @@index([attendanceDate, status])
  @@index([employeeId, attendanceDate])
  @@map("employee_attendances")
}

model LeaveBalance {
  id                        String   @id @default(cuid())
  employeeId                String
  leaveYear                 Int
  annualLeaveEntitlement    Int      @default(12)
  sickLeaveEntitlement      Int      @default(12)
  emergencyLeaveEntitlement Int      @default(2)
  annualLeaveUsed           Int      @default(0)
  sickLeaveUsed             Int      @default(0)
  emergencyLeaveUsed        Int      @default(0)
  annualLeaveRemaining      Int      @default(12)
  sickLeaveRemaining        Int      @default(12)
  emergencyLeaveRemaining   Int      @default(2)
  carriedOverDays           Int      @default(0)
  maxCarryOver              Int      @default(5)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  employee                  Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, leaveYear])
  @@index([leaveYear])
  @@map("leave_balances")
}

model LeaveRequest {
  id                 String      @id @default(cuid())
  employeeId         String
  leaveType          LeaveType
  startDate          DateTime    @db.Date
  endDate            DateTime    @db.Date
  totalDays          Int
  halfDay            Boolean     @default(false)
  reason             String
  emergencyContact   String?
  emergencyPhone     String?
  coveringEmployee   String?
  status             LeaveStatus @default(PENDING)
  appliedAt          DateTime    @default(now())
  supervisorId       String?
  supervisorStatus   String?
  supervisorNotes    String?
  supervisorDate     DateTime?
  hrApprovedBy       String?
  hrStatus           String?
  hrNotes            String?
  hrApprovedAt       DateTime?
  finalApprovedBy    String?
  rejectionReason    String?
  documents          String[]
  medicalCertificate String?
  actualStartDate    DateTime?
  actualEndDate      DateTime?
  actualDays         Int?
  returnDate         DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  employee           Employee    @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId, status])
  @@index([startDate, endDate])
  @@index([leaveType, status])
  @@map("leave_requests")
}

model Payroll {
  id                  String        @id @default(cuid())
  employeeId          String
  payrollMonth        String
  payrollYear         Int
  payPeriodStart      DateTime      @db.Date
  payPeriodEnd        DateTime      @db.Date
  payDate             DateTime?
  basicSalary         Float
  dailySalary         Float
  hourlySalary        Float?
  workDays            Int
  actualWorkDays      Int
  absentDays          Int           @default(0)
  lateDays            Int           @default(0)
  overtimeHours       Float         @default(0)
  holidayHours        Float         @default(0)
  transportAllowance  Float         @default(0)
  mealAllowance       Float         @default(0)
  housingAllowance    Float         @default(0)
  familyAllowance     Float         @default(0)
  performanceBonus    Float         @default(0)
  overtimePayment     Float         @default(0)
  holidayPayment      Float         @default(0)
  otherAllowances     Json?
  incomeTax           Float         @default(0)
  socialInsurance     Float         @default(0)
  employmentInsurance Float         @default(0)
  loanDeduction       Float         @default(0)
  lateDeduction       Float         @default(0)
  absentDeduction     Float         @default(0)
  otherDeductions     Json?
  grossSalary         Float
  totalDeductions     Float
  netSalary           Float
  taxableIncome       Float
  ptkpAmount          Float         @default(0)
  pph21Amount         Float         @default(0)
  status              PayrollStatus @default(DRAFT)
  calculatedAt        DateTime?
  calculatedBy        String?
  approvedBy          String?
  approvedAt          DateTime?
  paidAt              DateTime?
  paymentMethod       String?
  bankAccount         String?
  transferReference   String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  employee            Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, payrollMonth, payrollYear])
  @@index([payrollMonth, payrollYear])
  @@index([status, payDate])
  @@map("payrolls")
}

model PerformanceReview {
  id                String     @id @default(cuid())
  employeeId        String
  reviewerId        String
  reviewPeriod      String
  reviewType        ReviewType
  reviewYear        Int
  dueDate           DateTime
  startedAt         DateTime?
  submittedAt       DateTime?
  completedAt       DateTime?
  technicalSkills   Float?
  communication     Float?
  teamwork          Float?
  leadership        Float?
  problemSolving    Float?
  timeManagement    Float?
  qualityOfWork     Float?
  productivity      Float?
  innovation        Float?
  customerService   Float?
  overallScore      Float?
  overallRating     String?
  previousGoals     String[]
  achievedGoals     String[]
  missedGoals       String[]
  newGoals          String[]
  strengths         String[]
  areasImprovement  String[]
  trainingNeeds     String[]
  careerDevelopment String[]
  reviewerComments  String?
  employeeComments  String?
  selfAssessment    String?
  developmentPlan   String?
  status            String     @default("DRAFT")
  isEmployeeSigned  Boolean    @default(false)
  isReviewerSigned  Boolean    @default(false)
  followUpRequired  Boolean    @default(false)
  followUpDate      DateTime?
  followUpNotes     String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  employee          Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId, reviewPeriod])
  @@index([reviewType, reviewYear])
  @@index([status, dueDate])
  @@map("performance_reviews")
}

model Training {
  id                  String             @id @default(cuid())
  sppgId              String
  trainingCode        String
  trainingName        String
  description         String?
  category            String
  provider            String
  providerName        String?
  trainerName         String?
  trainerContact      String?
  startDate           DateTime
  endDate             DateTime
  duration            Int
  location            String?
  mode                String
  maxParticipants     Int
  currentParticipants Int                @default(0)
  costPerParticipant  Float?
  totalBudget         Float?
  materials           String[]
  prerequisites       String[]
  objectives          String[]
  providesCertificate Boolean            @default(false)
  certificateName     String?
  validityPeriod      Int?
  status              TrainingStatus     @default(PLANNED)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  participants        EmployeeTraining[]
  sppg                SPPG               @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@unique([sppgId, trainingCode])
  @@index([sppgId, status])
  @@index([startDate, endDate])
  @@map("trainings")
}

model EmployeeTraining {
  id                String    @id @default(cuid())
  employeeId        String
  trainingId        String
  enrolledAt        DateTime  @default(now())
  enrolledBy        String?
  attended          Boolean   @default(false)
  attendanceRate    Float?
  preTestScore      Float?
  postTestScore     Float?
  finalScore        Float?
  passed            Boolean   @default(false)
  completedAt       DateTime?
  certificateUrl    String?
  certificateNumber String?
  feedback          String?
  rating            Float?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  employee          Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  training          Training  @relation(fields: [trainingId], references: [id], onDelete: Cascade)

  @@unique([employeeId, trainingId])
  @@index([trainingId, attended])
  @@map("employee_trainings")
}

model DisciplinaryAction {
  id                 String    @id @default(cuid())
  employeeId         String
  incidentDate       DateTime
  reportedDate       DateTime  @default(now())
  reportedBy         String
  violationType      String
  violationLevel     String
  description        String
  evidenceUrls       String[]
  investigatedBy     String?
  investigationNotes String?
  witnessStatements  String[]
  actionType         String
  actionDetails      String
  startDate          DateTime?
  endDate            DateTime?
  followUpRequired   Boolean   @default(false)
  followUpDate       DateTime?
  followUpNotes      String?
  status             String    @default("OPEN")
  resolvedAt         DateTime?
  resolvedBy         String?
  appealSubmitted    Boolean   @default(false)
  appealDate         DateTime?
  appealNotes        String?
  appealDecision     String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  employee           Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId, status])
  @@index([violationType, violationLevel])
  @@index([incidentDate])
  @@map("disciplinary_actions")
}

model SppgVirtualAccount {
  id                 String              @id @default(cuid())
  sppgId             String              @unique
  accountNumber      String              @unique
  accountName        String
  bankCode           String
  bankName           String
  yayasanName        String
  yayasanAddress     String
  yayasanPic         String
  yayasanPhone       String
  yayasanEmail       String
  isActive           Boolean             @default(true)
  activatedAt        DateTime?
  deactivatedAt      DateTime?
  currentBalance     Float               @default(0)
  lastUpdatedBalance DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  banperRequests     BanperRequest[]
  transactions       BanperTransaction[]
  sppg               SPPG                @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@map("sppg_virtual_accounts")
}

model BanperRequest {
  id                        String              @id @default(cuid())
  sppgId                    String
  virtualAccountId          String
  requestNumber             String              @unique
  requestDate               DateTime            @default(now())
  operationalPeriod         String
  totalBeneficiaries        Int
  beneficiaryBreakdown      Json
  dailyBudgetPerBeneficiary Float
  operationalDays           Int                 @default(12)
  foodCostTotal             Float
  operationalCost           Float
  transportCost             Float?
  utilityCost               Float?
  staffCost                 Float?
  otherCosts                Float?
  totalAmount               Float
  status                    BanperRequestStatus @default(DRAFT)
  submittedAt               DateTime?
  reviewedAt                DateTime?
  approvedAt                DateTime?
  disbursedAt               DateTime?
  submittedBy               String?
  reviewedBy                String?
  approvedBy                String?
  supportingDocuments       String[]
  approvalDocuments         String[]
  requestNotes              String?
  reviewNotes               String?
  rejectionReason           String?
  createdAt                 DateTime            @default(now())
  updatedAt                 DateTime            @updatedAt
  sppg                      SPPG                @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  virtualAccount            SppgVirtualAccount  @relation(fields: [virtualAccountId], references: [id])
  transactions              BanperTransaction[]

  @@index([sppgId, status])
  @@index([requestDate, operationalPeriod])
  @@map("banper_requests")
}

model BanperTransaction {
  id                String             @id @default(cuid())
  sppgId            String
  virtualAccountId  String
  banperRequestId   String?
  transactionNumber String             @unique
  transactionDate   DateTime           @default(now())
  transactionType   String
  amount            Float
  balanceBefore     Float
  balanceAfter      Float
  purpose           String
  category          String
  description       String?
  referenceNumber   String?
  receiptNumber     String?
  receiptUrl        String?
  approvedBy        String?
  approvedAt        DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  banperRequest     BanperRequest?     @relation(fields: [banperRequestId], references: [id])
  sppg              SPPG               @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  virtualAccount    SppgVirtualAccount @relation(fields: [virtualAccountId], references: [id])

  @@index([sppgId, transactionDate])
  @@index([transactionType, category])
  @@map("banper_transactions")
}

model SppgTeamMember {
  id                 String    @id @default(cuid())
  sppgId             String
  employeeId         String?
  fullName           String
  idNumber           String?
  phone              String
  email              String?
  address            String
  isVolunteer        Boolean   @default(true)
  recruitmentSource  String?
  role               SppgRole
  roleDescription    String?
  teamSize           Int?
  workStartTime      String?
  workEndTime        String?
  workDays           String[]
  dailyWage          Float?
  monthlyWage        Float?
  transportAllowance Float?
  mealAllowance      Float?
  isActive           Boolean   @default(true)
  joinDate           DateTime  @default(now())
  leaveDate          DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  employee           Employee? @relation(fields: [employeeId], references: [id])
  sppg               SPPG      @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, role])
  @@index([isActive, role])
  @@map("sppg_team_members")
}

model DistributionSchedule {
  id                     String                @id @default(cuid())
  sppgId                 String
  productionId           String // ✅ REQUIRED: Link to completed production
  distributionDate       DateTime
  wave                   DistributionWave
  targetCategories       BeneficiaryCategory[]
  estimatedBeneficiaries Int

  // Packaging & Logistics (distribution-specific)
  packagingType       String
  packagingCost       Float?
  deliveryMethod      String
  distributionTeam    String[]
  vehicleCount        Int?
  estimatedTravelTime Int?
  fuelCost            Float?

  // Status
  status      DistributionScheduleStatus @default(PLANNED)
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt

  // Relations
  distribution_deliveries DistributionDelivery[]
  sppg                    SPPG                   @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  production              FoodProduction         @relation("ProductionSchedules", fields: [productionId], references: [id], onDelete: Cascade)
  executions              FoodDistribution[]
  vehicleAssignments      VehicleAssignment[]    @relation("ScheduleVehicles")

  @@index([sppgId, distributionDate, wave])
  @@index([productionId])
  @@index([status])
  @@map("distribution_schedules")
}

model DistributionDelivery {
  id                  String  @id @default(cuid())
  scheduleId          String
  distributionId      String? // ✅ PHASE 3: Link to FoodDistribution execution
  schoolBeneficiaryId String? // ✅ PHASE 3: School beneficiary

  // Legacy fields (for backward compatibility)
  targetType    String
  targetName    String
  targetAddress String
  targetContact String?

  // Timing
  estimatedArrival    DateTime
  actualArrival       DateTime?
  plannedTime         DateTime? // ✅ PHASE 3
  actualTime          DateTime? // ✅ PHASE 3
  departureTime       DateTime? // ✅ PHASE 3
  arrivalTime         DateTime? // ✅ PHASE 3
  deliveryCompletedAt DateTime? // ✅ PHASE 3

  // Route Management
  plannedRoute  String? // ✅ PHASE 3
  actualRoute   String? // ✅ PHASE 3
  estimatedTime Int? // ✅ PHASE 3: minutes

  // GPS Tracking (✅ PHASE 3)
  departureLocation   String? // GPS: "lat,lng"
  arrivalLocation     String? // GPS: "lat,lng"
  currentLocation     String? // GPS: "lat,lng" (real-time)
  routeTrackingPoints String[] // GPS trail: ["lat,lng", ...]

  // Portions
  portionsDelivered Int
  portionsPlanned   Int @default(0) // ✅ PHASE 3

  // Team
  driverName  String
  helperNames String[]
  vehicleInfo String?

  // Delivery Status
  status      DeliveryStatus @default(ASSIGNED) // ASSIGNED → DEPARTED → DELIVERED | FAILED
  deliveredBy String?
  deliveredAt DateTime?

  // Proof of Delivery
  recipientName      String?
  recipientTitle     String? // ✅ PHASE 3
  recipientSignature String? // URL to signature image
  deliveryPhoto      String? // URL to delivery photo (legacy - use photos relation)
  notes              String?
  deliveryNotes      String? // ✅ PHASE 3

  // Quality Check (✅ PHASE 3)
  foodQualityChecked Boolean  @default(false)
  foodQualityNotes   String?
  foodTemperature    Decimal? @db.Decimal(5, 2) // Celsius

  // Relations
  schedule          DistributionSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  distribution      FoodDistribution?    @relation(fields: [distributionId], references: [id]) // ✅ PHASE 3
  schoolBeneficiary SchoolBeneficiary?   @relation(fields: [schoolBeneficiaryId], references: [id]) // ✅ PHASE 3
  receipts          BeneficiaryReceipt[]
  photos            DeliveryPhoto[] // ✅ PHASE 3
  issues            DeliveryIssue[] // ✅ PHASE 3
  trackingPoints    DeliveryTracking[] // ✅ PHASE 3

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([scheduleId, status])
  @@index([distributionId, status])
  @@index([schoolBeneficiaryId])
  @@map("distribution_deliveries")
}

// === Delivery Photo Management (✅ PHASE 3) ===
model DeliveryPhoto {
  id         String @id @default(cuid())
  deliveryId String

  // Photo Details
  photoUrl  String
  photoType PhotoType
  caption   String?

  // GPS Location of Photo
  locationTaken String? // GPS: "lat,lng"

  // Metadata
  fileSize Int? // bytes
  mimeType String?

  // Timestamp
  takenAt DateTime @default(now())

  // Relations
  delivery DistributionDelivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId, photoType])
  @@index([takenAt])
  @@map("delivery_photos")
}

// === Delivery Issue Management (✅ PHASE 3) ===
model DeliveryIssue {
  id         String @id @default(cuid())
  deliveryId String

  // Issue Details
  issueType   IssueType
  severity    IssueSeverity
  description String

  // Resolution
  resolvedAt      DateTime?
  resolutionNotes String?

  // Timestamp
  reportedAt DateTime @default(now())

  // Relations
  delivery DistributionDelivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId, resolvedAt])
  @@index([issueType, severity])
  @@map("delivery_issues")
}

// === Delivery GPS Tracking (✅ PHASE 3) ===
model DeliveryTracking {
  id         String @id @default(cuid())
  deliveryId String

  // GPS Coordinates
  latitude  Decimal  @db.Decimal(10, 8)
  longitude Decimal  @db.Decimal(11, 8)
  accuracy  Decimal? @db.Decimal(8, 2) // meters

  // Status at this tracking point
  status String // "PENDING", "IN_TRANSIT", "ARRIVED", "DELIVERED", "FAILED"
  notes  String?

  // Timestamp
  recordedAt DateTime @default(now())

  // Relations
  delivery DistributionDelivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId, recordedAt])
  @@index([recordedAt])
  @@map("delivery_tracking")
}

model BeneficiaryReceipt {
  id                  String                @id @default(cuid())
  sppgId              String
  deliveryId          String?
  receiptNumber       String                @unique
  receiptDate         DateTime              @default(now())
  beneficiaryName     String
  beneficiaryId       String?
  beneficiaryCategory BeneficiaryCategory
  schoolName          String?
  className           String?
  teacherName         String?
  mealType            String
  menuName            String
  portionCount        Int
  status              ReceiptStatus         @default(PENDING)
  receivedAt          DateTime?
  recipientSignature  String?
  photoProof          String?
  gpsLocation         String?
  mealQuality         Float?
  feedback            String?
  followUpRequired    Boolean               @default(false)
  followUpNotes       String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  delivery            DistributionDelivery? @relation(fields: [deliveryId], references: [id])
  sppg                SPPG                  @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, receiptDate])
  @@index([status, beneficiaryCategory])
  @@map("beneficiary_receipts")
}

model SppgOperationalReport {
  id                     String     @id @default(cuid())
  sppgId                 String
  reportNumber           String     @unique
  reportType             ReportType
  reportPeriod           String
  reportDate             DateTime   @default(now())
  title                  String
  summary                String?
  content                Json
  beneficiariesServed    Int?
  mealsDistributed       Int?
  totalExpenses          Float?
  foodSafetyScore        Float?
  distributionEfficiency Float?
  beneficiaryFeedback    Float?
  budgetAllocated        Float?
  budgetUtilized         Float?
  remainingBudget        Float?
  attachments            String[]
  photos                 String[]
  preparedBy             String
  reviewedBy             String?
  approvedBy             String?
  status                 String     @default("DRAFT")
  submittedAt            DateTime?
  approvedAt             DateTime?
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  sppg                   SPPG       @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, reportType, reportPeriod])
  @@index([status, reportDate])
  @@map("sppg_operational_reports")
}

model KitchenEquipment {
  id              String                 @id @default(cuid())
  sppgId          String
  equipmentName   String
  equipmentCode   String                 @unique
  category        EquipmentCategory
  brand           String?
  model           String?
  serialNumber    String?
  condition       EquipmentCondition     @default(GOOD)
  status          EquipmentStatus        @default(ACTIVE)
  lastMaintenance DateTime?
  nextMaintenance DateTime?
  maintenanceCost Float?
  purchaseDate    DateTime?
  purchaseCost    Float?
  warranty        DateTime?
  supplier        String?
  location        String?
  usageFrequency  String?
  operatingHours  Float?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  maintenanceLog  EquipmentMaintenance[]
  sppg            SPPG                   @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, category])
  @@index([status, condition])
  @@map("kitchen_equipment")
}

model EquipmentMaintenance {
  id              String              @id @default(cuid())
  equipmentId     String
  maintenanceDate DateTime            @default(now())
  maintenanceType MaintenanceType
  description     String
  cost            Float?
  performedBy     String
  nextSchedule    DateTime?
  serviceProvider String?
  serviceContact  String?
  partsReplaced   String[]
  materialsCost   Float?
  laborCost       Float?
  conditionBefore EquipmentCondition?
  conditionAfter  EquipmentCondition?
  photos          String[]
  receiptUrl      String?
  warrantyInfo    String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  equipment       KitchenEquipment    @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  @@index([equipmentId, maintenanceDate])
  @@index([maintenanceType])
  @@map("equipment_maintenance")
}

model UtilityMonitoring {
  id                String             @id @default(cuid())
  sppgId            String
  monitoringDate    DateTime           @default(now())
  monitoringPeriod  String
  electricUsage     Float?
  electricCost      Float?
  generatorUsage    Float?
  generatorFuelCost Float?
  powerOutages      Int?
  waterUsage        Float?
  waterCost         Float?
  waterQuality      WaterQualityStatus
  waterTestDate     DateTime?
  internetStatus    InternetStatus
  internetCost      Float?
  downtimeHours     Float?
  gasUsage          Float?
  gasCost           Float?
  gasDeliveries     Int?
  totalUtilityCost  Float?
  issues            String[]
  maintenanceNeeds  String[]
  notes             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  sppg              SPPG               @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, monitoringDate])
  @@index([waterQuality, internetStatus])
  @@map("utility_monitoring")
}

model LaboratoryTest {
  id                String     @id @default(cuid())
  sppgId            String
  testDate          DateTime   @default(now())
  testType          TestType
  sampleId          String
  sampleSource      String
  sampleDescription String?
  testParameters    String[]
  testMethod        String?
  testResults       Json
  testStatus        TestStatus @default(PENDING)
  isCompliant       Boolean?
  bpomStandard      String?
  kemenkesStandard  String?
  complianceNotes   String?
  laboratoryName    String
  labCertNumber     String?
  testerName        String
  testCost          Float?
  requiresAction    Boolean    @default(false)
  actionTaken       String?
  retestRequired    Boolean    @default(false)
  retestDate        DateTime?
  testCertificate   String?
  testPhotos        String[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  sppg              SPPG       @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, testType, testDate])
  @@index([testStatus, isCompliant])
  @@map("laboratory_tests")
}

model FoodSafetyCertification {
  id                 String              @id @default(cuid())
  sppgId             String
  certificationName  String
  certifyingBody     String
  certificateNumber  String              @unique
  certificationScope String?
  issuedDate         DateTime
  expiryDate         DateTime
  status             CertificationStatus @default(ACTIVE)
  renewalRequired    Boolean             @default(false)
  renewalDate        DateTime?
  renewalCost        Float?
  renewalStatus      String?
  assessmentDate     DateTime?
  assessorName       String?
  assessmentScore    Float?
  assessmentNotes    String?
  requirements       String[]
  complianceStatus   Json
  certificateUrl     String?
  supportingDocs     String[]
  initialCost        Float?
  annualFee          Float?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  sppg               SPPG                @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, status])
  @@index([expiryDate, renewalRequired])
  @@map("food_safety_certifications")
}

model DailyFoodSample {
  id                 String    @id @default(cuid())
  sppgId             String
  sampleDate         DateTime  @default(now())
  menuName           String
  batchNumber        String?
  portionTested      String?
  collectedBy        String
  collectionTime     DateTime?
  sampleWeight       Float?
  storageLocation    String
  storageTemp        Float?
  storageDuration    Int       @default(72)
  visualCheck        String?
  smellCheck         String?
  textureCheck       String?
  colorCheck         String?
  overallQuality     Float?
  acceptabilityScore Float?
  testedInLab        Boolean   @default(false)
  labTestId          String?
  disposalDate       DateTime?
  disposalMethod     String?
  disposedBy         String?
  disposalReason     String?
  samplePhotos       String[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  sppg               SPPG      @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, sampleDate])
  @@index([menuName, batchNumber])
  @@map("daily_food_samples")
}

model MenuResearch {
  id                  String                @id @default(cuid())
  sppgId              String
  researchTitle       String
  researchCode        String?
  researchType        ResearchType
  priority            String                @default("MEDIUM")
  objective           String
  methodology         String
  hypothesis          String?
  expectedOutcome     String?
  testStartDate       DateTime
  testEndDate         DateTime?
  testingStatus       ResearchStatus        @default(PLANNING)
  testGroupSize       Int?
  controlGroupSize    Int?
  targetBeneficiaries BeneficiaryCategory[]
  targetAgeGroup      String?
  researchBudget      Float?
  actualCost          Float?
  resourcesNeeded     String[]
  findings            String?
  recommendations     String?
  isSuccessful        Boolean?
  successMetrics      Json?
  implementationDate  DateTime?
  implementationNotes String?
  rolloutPlan         String?
  approvedBy          String?
  approvalDate        DateTime?
  reviewNotes         String[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  sppg                SPPG                  @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  testResults         MenuTestResult[]

  @@index([sppgId, researchType])
  @@index([testingStatus, priority])
  @@map("menu_research")
}

model MenuTestResult {
  id                    String       @id @default(cuid())
  researchId            String
  testDate              DateTime     @default(now())
  testSession           String
  menuVariation         String
  testGroup             String?
  nutritionScore        Float?
  calorieContent        Float?
  proteinContent        Float?
  vitaminContent        Json?
  tasteScore            Float?
  textureScore          Float?
  aromaScore            Float?
  appearanceScore       Float?
  overallScore          Float?
  acceptanceRate        Float?
  participantCount      Int?
  participantFeedback   String[]
  nutritionistNotes     String?
  chefNotes             String?
  qualityControlNotes   String?
  costPerPortion        Float?
  ingredientCost        Float?
  preparationTime       Int?
  comparedToCurrentMenu Boolean      @default(false)
  improvementPercentage Float?
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  research              MenuResearch @relation(fields: [researchId], references: [id], onDelete: Cascade)

  @@index([researchId, testDate])
  @@index([overallScore, acceptanceRate])
  @@map("menu_test_results")
}

model LocalFoodAdaptation {
  id                   String              @id @default(cuid())
  sppgId               String
  ingredientName       String
  localName            String
  scientificName       String?
  region               String
  season               String
  caloriesPer100g      Float?
  proteinPer100g       Float?
  fatPer100g           Float?
  carbsPer100g         Float?
  fiberPer100g         Float?
  vitaminContent       Json?
  mineralContent       Json?
  avgCostPerKg         Float?
  availability         String
  bestSuppliers        String[]
  harvestMonths        String[]
  usageFrequency       String
  compatibleMenus      String[]
  preparationMethods   PreparationMethod[]
  storageRequirements  String?
  culturalSignificance String?
  preparationTradition String?
  nutritionalBenefits  String?
  communityAcceptance  Float?
  supportLocalFarmers  Boolean             @default(false)
  economicBenefit      String?
  sustainabilityNotes  String?
  qualityGrade         String?
  shelfLife            Int?
  processingRequired   Boolean             @default(false)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  sppg                 SPPG                @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, region, season])
  @@index([availability, usageFrequency])
  @@map("local_food_adaptations")
}

model NutritionConsultation {
  id                          String           @id @default(cuid())
  sppgId                      String
  nutritionistId              String
  consultationDate            DateTime         @default(now())
  consultationType            String
  sessionDuration             Int?
  consultationFee             Float?
  clientName                  String?
  clientAge                   Int?
  clientGender                String?
  clientContact               String?
  clientCondition             String[]
  currentWeight               Float?
  currentHeight               Float?
  bmiCalculation              Float?
  nutritionStatus             NutritionStatus?
  healthHistory               String?
  currentSymptoms             String[]
  medications                 String[]
  allergies                   String[]
  currentDiet                 String?
  foodPreferences             String[]
  foodDislikes                String[]
  culturalDietaryRestrictions String[]
  recommendations             String
  dietPlan                    String?
  mealPlanning                Json?
  supplementRecommendations   String[]
  followUpDate                DateTime?
  followUpType                String?
  followUpNotes               String?
  progressNotes               String[]
  isCompleted                 Boolean          @default(false)
  treatmentOutcome            String?
  createdAt                   DateTime         @default(now())
  updatedAt                   DateTime         @updatedAt
  sppg                        SPPG             @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, nutritionistId])
  @@index([consultationType, nutritionStatus])
  @@map("nutrition_consultations")
}

model NutritionEducation {
  id                     String    @id @default(cuid())
  sppgId                 String
  educatorId             String
  sessionTitle           String
  sessionDate            DateTime
  sessionType            String
  targetAudience         String
  duration               Int
  participantCount       Int
  location               String
  sessionMode            String
  topics                 String[]
  learningObjectives     String[]
  materials              String[]
  handouts               String[]
  activitiesPlanned      String[]
  cookingDemoIncluded    Boolean   @default(false)
  samplingProvided       Boolean   @default(false)
  participantFeedback    Float?
  knowledgePreTest       Float?
  knowledgePostTest      Float?
  skillsDemonstration    Float?
  messageClarity         Float?
  culturalRelevance      Float?
  practicalApplicability Float?
  followUpRequired       Boolean   @default(false)
  followUpPlanned        DateTime?
  behaviorChangeExpected String[]
  impactMeasurement      String?
  budgetUsed             Float?
  materialsNeeded        String[]
  equipmentNeeded        String[]
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  sppg                   SPPG      @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, educatorId])
  @@index([targetAudience, sessionDate])
  @@map("nutrition_education")
}

model ProductionOptimization {
  id                       String    @id @default(cuid())
  sppgId                   String
  optimizationTitle        String
  optimizationDate         DateTime  @default(now())
  targetMetric             String
  priority                 String    @default("MEDIUM")
  currentCostPerPortion    Float?
  currentPreparationTime   Int?
  currentWastePercentage   Float?
  currentQualityScore      Float?
  currentNutritionDensity  Float?
  currentEnergyUsage       Float?
  targetCostPerPortion     Float?
  targetPreparationTime    Int?
  targetWastePercentage    Float?
  targetQualityScore       Float?
  targetNutritionDensity   Float?
  targetEnergyUsage        Float?
  strategyDescription      String
  implementationSteps      String[]
  resourcesRequired        String[]
  estimatedInvestment      Float?
  expectedSavings          Float?
  implementationStart      DateTime?
  implementationEnd        DateTime?
  milestones               Json?
  actualCostPerPortion     Float?
  actualPreparationTime    Int?
  actualWastePercentage    Float?
  actualQualityScore       Float?
  actualNutritionDensity   Float?
  actualEnergyUsage        Float?
  isSuccessful             Boolean?
  successPercentage        Float?
  costSavingsAchieved      Float?
  lessonsLearned           String?
  recommendationsForFuture String[]
  scalabilityAssessment    String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  sppg                     SPPG      @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, targetMetric])
  @@index([priority, isSuccessful])
  @@map("production_optimizations")
}

model WasteManagement {
  id                String    @id @default(cuid())
  sppgId            String
  wasteDate         DateTime  @default(now())
  wasteType         String
  wasteCategory     String?
  wasteWeight       Float
  wasteVolume       Float?
  containerCount    Int?
  wasteSource       String
  sourceSpecific    String?
  wasteReason       String?
  responsibleArea   String?
  ingredientValue   Float?
  disposalCost      Float?
  laborCost         Float?
  disposalMethod    String
  disposalLocation  String?
  disposalPartner   String?
  disposalDate      DateTime?
  carbonFootprint   Float?
  waterImpact       Float?
  preventionActions String[]
  reductionTarget   Float?
  alternativeUses   String[]
  processChanges    String[]
  trainingNeeds     String[]
  equipmentNeeds    String[]
  isRecurringIssue  Boolean   @default(false)
  trendAnalysis     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  sppg              SPPG      @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, wasteDate, wasteType])
  @@index([wasteSource, disposalMethod])
  @@map("waste_management")
}

model PerformanceAnalytics {
  id                     String         @id @default(cuid())
  sppgId                 String
  analysisDate           DateTime       @default(now())
  analysisType           AnalyticsType
  analysisPeriod         String
  dataSourceRange        String
  costEfficiency         Float?
  timeEfficiency         Float?
  qualityScore           Float?
  wastagePercentage      Float?
  nutritionCompliance    Float?
  energyEfficiency       Float?
  totalCost              Float?
  costBreakdown          Json?
  profitabilityScore     Float?
  budgetVariance         Float?
  productivityRate       Float?
  equipmentUtilization   Float?
  staffEfficiency        Float?
  distributionEfficiency Float?
  customerSatisfaction   Float?
  nutritionAccuracy      Float?
  foodSafetyScore        Float?
  costTrend              TrendDirection
  qualityTrend           TrendDirection
  efficiencyTrend        TrendDirection
  demandTrend            TrendDirection
  predictedCost          Float?
  predictedDemand        Int?
  predictedChallenges    String[]
  riskFactors            String[]
  opportunityAreas       String[]
  industryBenchmark      Float?
  regionalAverage        Float?
  performanceGap         Float?
  recommendations        String[]
  actionItems            String[]
  priorityActions        String[]
  quickWins              String[]
  dataCompleteness       Float?
  confidenceLevel        Float?
  dataQualityNotes       String?
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  sppg                   SPPG           @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, analysisType, analysisPeriod])
  @@index([costEfficiency, qualityScore])
  @@map("performance_analytics")
}

model SppgBenchmarking {
  id                           String        @id @default(cuid())
  sppgId                       String
  benchmarkDate                DateTime      @default(now())
  compareType                  BenchmarkType
  benchmarkScope               String?
  comparisonGroup              String?
  comparisonSppgCount          Int?
  dataValidityPeriod           String
  ourCostPerPortion            Float
  benchmarkCostPerPortion      Float
  costPerformanceRatio         Float?
  ourQualityScore              Float
  benchmarkQualityScore        Float
  qualityPerformanceRatio      Float?
  ourEfficiencyScore           Float
  benchmarkEfficiencyScore     Float
  efficiencyPerformanceRatio   Float?
  ourBeneficiaryCount          Int?
  benchmarkBeneficiaryCount    Int?
  ourNutritionCompliance       Float?
  benchmarkNutritionCompliance Float?
  ourWastePercentage           Float?
  benchmarkWastePercentage     Float?
  regionalRanking              Int?
  nationalRanking              Int?
  categoryRanking              Int?
  overallScore                 Float?
  costPercentile               Float?
  qualityPercentile            Float?
  efficiencyPercentile         Float?
  strengthAreas                String[]
  improvementAreas             String[]
  criticalGaps                 String[]
  opportunityAreas             String[]
  topPerformerPractices        String[]
  applicablePractices          String[]
  innovativeSolutions          String[]
  actionPlan                   String[]
  priorityImprovements         String[]
  resourceRequirements         String[]
  timelineEstimate             String?
  nextBenchmarkDate            DateTime?
  improvementTargets           Json?
  createdAt                    DateTime      @default(now())
  updatedAt                    DateTime      @updatedAt
  sppg                         SPPG          @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, benchmarkDate, compareType])
  @@index([regionalRanking, overallScore])
  @@map("sppg_benchmarking")
}

model UserPermission {
  id           String         @id @default(cuid())
  userId       String
  permission   PermissionType
  resourceType String
  resourceId   String?
  accessLevel  AccessLevel    @default(READ_ONLY)
  sppgId       String?
  moduleAccess String[]
  grantedBy    String
  grantedAt    DateTime       @default(now())
  expiresAt    DateTime?
  isActive     Boolean        @default(true)
  conditions   Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permission, resourceType, resourceId])
  @@index([userId, isActive])
  @@index([permission, accessLevel])
  @@map("user_permissions")
}

model UserSession {
  id                String    @id @default(cuid())
  userId            String
  sessionId         String    @unique
  ipAddress         String
  userAgent         String?
  deviceInfo        Json?
  startedAt         DateTime  @default(now())
  lastActiveAt      DateTime  @default(now())
  expiresAt         DateTime
  endedAt           DateTime?
  sessionType       String    @default("WEB")
  isValid           Boolean   @default(true)
  terminatedBy      String?
  terminationReason String?
  pagesVisited      String[]
  actionsPerformed  String[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isValid])
  @@index([sessionId])
  @@map("user_sessions")
}

model UserActivity {
  id           String      @id @default(cuid())
  userId       String
  activityType String
  module       String
  action       String
  resourceType EntityType?
  resourceId   String?
  ipAddress    String?
  userAgent    String?
  sessionId    String?
  beforeData   Json?
  afterData    Json?
  searchQuery  String?
  filters      Json?
  success      Boolean     @default(true)
  errorMessage String?
  responseTime Int?
  timestamp    DateTime    @default(now())
  duration     Int?
  createdAt    DateTime    @default(now())
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, activityType, timestamp])
  @@index([module, action])
  @@map("user_activities")
}

model UserAuditLog {
  id                 String      @id @default(cuid())
  userId             String?     @db.VarChar(50)
  sppgId             String?     @db.VarChar(50)
  action             AuditAction
  entityType         EntityType
  entityId           String      @db.VarChar(50)
  resourcePath       String?     @db.VarChar(500)
  oldValues          Json?
  newValues          Json?
  changes            Json?
  metadata           Json?
  ipAddress          String?     @db.Inet
  userAgent          String?
  sessionId          String?     @db.VarChar(255)
  requestId          String?     @db.VarChar(100)
  geoLocation        Json?
  deviceId           String?     @db.VarChar(255)
  browserFingerprint String?     @db.VarChar(255)
  authMethod         String?     @db.VarChar(50)
  authProvider       String?     @db.VarChar(50)
  tokenUsed          String?     @db.VarChar(100)
  riskLevel          String      @default("LOW") @db.VarChar(10)
  riskScore          Int         @default(0)
  threatIndicators   String[]
  flagged            Boolean     @default(false)
  reviewRequired     Boolean     @default(false)
  autoBlocked        Boolean     @default(false)
  retentionPolicy    String?     @db.VarChar(50)
  isPersonalData     Boolean     @default(false)
  dataClassification String      @default("INTERNAL") @db.VarChar(20)
  processingTime     Int?        @default(0)
  responseCode       String?     @db.VarChar(10)
  errorMessage       String?
  timestamp          DateTime    @default(now()) @db.Timestamptz(6)
  sppg               SPPG?       @relation("SppgAuditLogs", fields: [sppgId], references: [id])
  user               User?       @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
  @@index([sppgId, timestamp])
  @@index([action, timestamp])
  @@index([entityType, entityId, timestamp])
  @@index([riskLevel, riskScore, flagged])
  @@index([ipAddress, timestamp])
  @@index([sessionId, timestamp])
  @@index([resourcePath, action])
  @@index([timestamp])
  @@index([isPersonalData, retentionPolicy])
  @@index([threatIndicators])
  @@index([autoBlocked, reviewRequired])
  @@map("user_audit_logs")
}

model RolePermissionMatrix {
  id             String         @id @default(cuid())
  role           UserRole
  permission     PermissionType
  accessLevel    AccessLevel
  moduleScope    String[]
  conditions     Json?
  description    String?
  isDefault      Boolean        @default(true)
  isActive       Boolean        @default(true)
  createdBy      String
  lastModifiedBy String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@unique([role, permission, moduleScope])
  @@index([role, isActive])
  @@map("role_permission_matrix")
}

model UserOnboarding {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  currentStep            String    @default("PROFILE_SETUP")
  completedSteps         String[]
  totalSteps             Int       @default(10)
  progressPercent        Float     @default(0)
  trainingModules        Json?
  trainingScore          Float?
  startedAt              DateTime  @default(now())
  completedAt            DateTime?
  estimatedCompletion    DateTime?
  assignedMentor         String?
  helpRequests           Int       @default(0)
  supportTickets         String[]
  satisfactionScore      Float?
  feedback               String?
  improvementSuggestions String[]
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([currentStep, progressPercent])
  @@map("user_onboarding")
}

model Province {
  id                String              @id @default(cuid())
  code              String              @unique @db.VarChar(2)
  name              String              @db.VarChar(50)
  region            IndonesiaRegion
  timezone          Timezone
  regencies         Regency[]
  sppgs             SPPG[]              @relation("SppgProvince")
  schoolBeneficiary SchoolBeneficiary[] @relation("SchoolProvince") // ✅ NEW

  @@index([region])
  @@map("provinces")
}

model Regency {
  id                String              @id @default(cuid())
  provinceId        String              @db.VarChar(50)
  code              String              @db.VarChar(4)
  name              String              @db.VarChar(100)
  type              RegencyType
  districts         District[]
  province          Province            @relation(fields: [provinceId], references: [id], onDelete: Cascade)
  sppgs             SPPG[]              @relation("SppgRegency")
  schoolBeneficiary SchoolBeneficiary[] @relation("SchoolRegency") // ✅ NEW

  @@unique([provinceId, code])
  @@index([provinceId, type])
  @@map("regencies")
}

model District {
  id                String              @id @default(cuid())
  regencyId         String              @db.VarChar(50)
  code              String              @db.VarChar(6)
  name              String              @db.VarChar(100)
  regency           Regency             @relation(fields: [regencyId], references: [id], onDelete: Cascade)
  sppgs             SPPG[]              @relation("SppgDistrict")
  villages          Village[]
  schoolBeneficiary SchoolBeneficiary[] @relation("SchoolDistrict") // ✅ NEW

  @@unique([regencyId, code])
  @@index([regencyId])
  @@map("districts")
}

model Village {
  id                String              @id @default(cuid())
  districtId        String              @db.VarChar(50)
  code              String              @db.VarChar(10)
  name              String              @db.VarChar(100)
  type              VillageType
  postalCode        String?             @db.VarChar(5)
  employees         Employee[]          @relation("EmployeeVillage")
  schoolBeneficiary SchoolBeneficiary[] @relation("SchoolVillage")
  sppgs             SPPG[]              @relation("SppgVillage")
  district          District            @relation(fields: [districtId], references: [id], onDelete: Cascade)

  @@unique([districtId, code])
  @@index([districtId, type])
  @@map("villages")
}

model LandingPage {
  id                 String              @id @default(cuid())
  title              String
  slug               String              @unique
  description        String?
  metaTitle          String?
  metaDescription    String?
  heroSection        Json
  featuresSection    Json
  pricingSection     Json
  testimonialSection Json
  faqSection         Json
  keywords           String[]
  ogImage            String?
  canonicalUrl       String?
  isActive           Boolean             @default(true)
  template           LandingPageTemplate @default(DEFAULT)
  targetAudience     TargetAudience      @default(GENERAL)
  variantOf          String?
  variantWeight      Int                 @default(100)
  views              Int                 @default(0)
  conversions        Int                 @default(0)
  conversionRate     Float               @default(0)
  createdBy          String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  abTests            ABTest[]
  leadCaptures       LeadCapture[]
  pageAnalytics      PageAnalytics[]

  @@index([slug, isActive])
  @@index([targetAudience, isActive])
  @@map("landing_pages")
}

model ABTest {
  id               String          @id @default(cuid())
  name             String
  description      String?
  hypothesis       String?
  landingPageId    String
  targetMetric     ABTestMetric    @default(CONVERSION_RATE)
  confidenceLevel  Float           @default(0.95)
  startDate        DateTime?
  endDate          DateTime?
  duration         Int?
  status           ABTestStatus    @default(DRAFT)
  winner           String?
  statisticalPower Float?
  pValue           Float?
  conversionLift   Float?
  createdBy        String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  variants         ABTestVariant[]
  landingPage      LandingPage     @relation(fields: [landingPageId], references: [id], onDelete: Cascade)

  @@index([landingPageId, status])
  @@map("ab_tests")
}

model ABTestVariant {
  id                String   @id @default(cuid())
  name              String
  trafficPercentage Int      @default(50)
  isControl         Boolean  @default(false)
  content           Json
  testId            String
  views             Int      @default(0)
  conversions       Int      @default(0)
  bounces           Int      @default(0)
  conversionRate    Float    @default(0)
  bounceRate        Float    @default(0)
  engagementRate    Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  test              ABTest   @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@index([testId])
  @@map("ab_test_variants")
}

model BlogPost {
  id              String        @id @default(cuid())
  title           String
  slug            String        @unique
  excerpt         String?
  content         String
  featuredImage   String?
  gallery         String[]
  metaTitle       String?
  metaDescription String?
  keywords        String[]
  category        BlogCategory
  tags            String[]
  status          ContentStatus @default(DRAFT)
  publishedAt     DateTime?
  scheduledAt     DateTime?
  views           Int           @default(0)
  likes           Int           @default(0)
  shares          Int           @default(0)
  authorId        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  comments        BlogComment[]
  author          User          @relation(fields: [authorId], references: [id])

  @@index([category, status])
  @@index([publishedAt, status])
  @@map("blog_posts")
}

model BlogComment {
  id         String        @id @default(cuid())
  content    String
  author     String
  email      String
  website    String?
  status     CommentStatus @default(PENDING)
  isApproved Boolean       @default(false)
  blogPostId String
  parentId   String?
  createdAt  DateTime      @default(now())
  blogPost   BlogPost      @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  parent     BlogComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies    BlogComment[] @relation("CommentReplies")

  @@index([blogPostId, status])
  @@map("blog_comments")
}

model Testimonial {
  id               String           @id @default(cuid())
  customerName     String
  customerTitle    String?
  organizationName String
  organizationType OrganizationType
  content          String
  rating           Int
  customerPhoto    String?
  organizationLogo String?
  videoUrl         String?
  isCaseStudy      Boolean          @default(false)
  metricsImproved  Json?
  isActive         Boolean          @default(true)
  isFeatured       Boolean          @default(false)
  displayLocation  String[]
  sppgId           String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  caseStudy        CaseStudy?
  sppg             SPPG?            @relation(fields: [sppgId], references: [id])

  @@index([isActive, isFeatured])
  @@index([organizationType, isActive])
  @@map("testimonials")
}

model CaseStudy {
  id               String           @id @default(cuid())
  title            String
  slug             String           @unique
  summary          String
  customerName     String
  organizationName String
  organizationType OrganizationType
  location         String?
  challenge        String
  solution         String
  implementation   String
  results          String
  keyMetrics       Json
  beforeAfter      Json
  featuredImage    String?
  gallery          String[]
  videoUrl         String?
  metaDescription  String?
  keywords         String[]
  status           ContentStatus    @default(DRAFT)
  publishedAt      DateTime?
  sppgId           String?
  testimonialId    String?          @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  sppg             SPPG?            @relation(fields: [sppgId], references: [id])
  testimonial      Testimonial?     @relation(fields: [testimonialId], references: [id])

  @@index([slug, status])
  @@index([organizationType, status])
  @@map("case_studies")
}

model FAQ {
  id          String      @id @default(cuid())
  question    String
  answer      String
  category    FAQCategory
  tags        String[]
  isActive    Boolean     @default(true)
  isPinned    Boolean     @default(false)
  order       Int         @default(0)
  views       Int         @default(0)
  helpful     Int         @default(0)
  notHelpful  Int         @default(0)
  relatedFAQs String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([category, isActive])
  @@index([isPinned, order])
  @@map("faqs")
}

model HelpArticle {
  id              String          @id @default(cuid())
  title           String
  slug            String          @unique
  content         String
  excerpt         String?
  category        HelpCategory
  difficulty      DifficultyLevel @default(BEGINNER)
  tags            String[]
  metaDescription String?
  keywords        String[]
  searchKeywords  String[]
  status          ContentStatus   @default(DRAFT)
  publishedAt     DateTime?
  views           Int             @default(0)
  helpful         Int             @default(0)
  notHelpful      Int             @default(0)
  avgReadTime     Int?
  relatedArticles String[]
  faqs            String[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([category, status])
  @@index([slug, status])
  @@map("help_articles")
}

model LeadCapture {
  id                  String            @id @default(cuid())
  name                String
  email               String            @unique
  phone               String?
  organizationName    String?
  position            String?
  source              LeadSource
  medium              String?
  campaign            String?
  content             String?
  term                String?
  formType            LeadFormType
  formLocation        String
  leadMagnet          String?
  organizationType    OrganizationType?
  estimatedUsers      Int?
  estimatedBudget     Float?
  timeline            String?
  specificNeeds       String[]
  ipAddress           String?
  userAgent           String?
  referrer            String?
  status              LeadStatus        @default(NEW)
  score               Int               @default(0)
  isQualified         Boolean           @default(false)
  assignedTo          String?
  lastContactedAt     DateTime?
  nextFollowUpAt      DateTime?
  notes               String?
  convertedAt         DateTime?
  convertedToDemo     Boolean           @default(false)
  demoRequestId       String?
  convertedToCustomer Boolean           @default(false)
  sppgId              String?
  landingPageId       String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  demoRequest         DemoRequest?      @relation(fields: [demoRequestId], references: [id])
  landingPage         LandingPage?      @relation(fields: [landingPageId], references: [id])
  sppg                SPPG?             @relation(fields: [sppgId], references: [id])

  @@index([status, score])
  @@index([source, createdAt])
  @@map("lead_captures")
}

model ImageFolder {
  id          String        @id @default(cuid())
  name        String
  description String?
  color       String?
  parentId    String?
  createdBy   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  images      ImageFile[]
  parent      ImageFolder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    ImageFolder[] @relation("FolderHierarchy")

  @@index([parentId])
  @@map("image_folders")
}

model ImageFile {
  id           String       @id @default(cuid())
  name         String
  filename     String       @unique
  originalName String
  path         String       @unique
  alt          String?
  description  String?
  size         Int
  mimeType     String
  width        Int?
  height       Int?
  tags         String[]
  folderId     String?
  usageCount   Int          @default(0)
  lastUsedAt   DateTime?
  uploadedBy   String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  folder       ImageFolder? @relation(fields: [folderId], references: [id])

  @@index([folderId])
  @@index([uploadedBy])
  @@index([mimeType])
  @@map("image_files")
}

model Template {
  id          String           @id @default(cuid())
  name        String
  description String?
  category    TemplateCategory @default(HEALTHCARE)
  content     Json
  settings    Json
  preview     String?
  isPremium   Boolean          @default(false)
  isActive    Boolean          @default(true)
  isPopular   Boolean          @default(false)
  usageCount  Int              @default(0)
  rating      Float            @default(0)
  ratingCount Int              @default(0)
  features    String[]
  sections    String[]
  tags        String[]
  keywords    String[]
  createdBy   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([category, isActive])
  @@index([isPopular, isActive])
  @@map("templates")
}

model PageAnalytics {
  id              String       @id @default(cuid())
  pageType        PageType
  pageId          String?
  url             String
  title           String?
  date            DateTime     @db.Date
  sessions        Int          @default(0)
  pageviews       Int          @default(0)
  uniqueVisitors  Int          @default(0)
  bounceRate      Float        @default(0)
  avgSessionTime  Int          @default(0)
  organicTraffic  Int          @default(0)
  directTraffic   Int          @default(0)
  referralTraffic Int          @default(0)
  socialTraffic   Int          @default(0)
  paidTraffic     Int          @default(0)
  leadCaptures    Int          @default(0)
  demoRequests    Int          @default(0)
  conversionRate  Float        @default(0)
  timeOnPage      Int          @default(0)
  scrollDepth     Float        @default(0)
  exitRate        Float        @default(0)
  landingPage     LandingPage? @relation(fields: [pageId], references: [id])

  @@unique([pageType, pageId, date])
  @@index([date, pageType])
  @@map("page_analytics")
}

model MarketingCampaign {
  id                 String         @id @default(cuid())
  name               String
  description        String?
  type               CampaignType
  status             CampaignStatus @default(DRAFT)
  startDate          DateTime
  endDate            DateTime?
  budget             Float?
  targetAudience     Json
  utmSource          String?
  utmMedium          String?
  utmCampaign        String
  utmContent         String?
  utmTerm            String?
  primaryGoal        CampaignGoal
  targetLeads        Int?
  targetConversions  Int?
  targetRevenue      Float?
  totalSpend         Float          @default(0)
  totalLeads         Int            @default(0)
  totalConversions   Int            @default(0)
  totalRevenue       Float          @default(0)
  costPerLead        Float          @default(0)
  costPerAcquisition Float          @default(0)
  returnOnInvestment Float          @default(0)
  createdBy          String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@index([status, startDate])
  @@index([type, status])
  @@map("marketing_campaigns")
}

model DemoRequest {
  id                    String            @id @default(cuid())
  organizationName      String
  picName               String
  picEmail              String            @unique
  picPhone              String
  picWhatsapp           String?
  picPosition           String?
  organizationType      OrganizationType  @default(YAYASAN)
  targetBeneficiaries   Int?
  operationalArea       String?
  currentSystem         String?
  currentChallenges     String[]
  expectedGoals         String[]
  demoType              DemoType          @default(STANDARD)
  requestedFeatures     String[]
  specialRequirements   String?
  preferredStartDate    DateTime?
  estimatedDuration     Int               @default(14)
  status                DemoRequestStatus @default(SUBMITTED)
  reviewedAt            DateTime?
  reviewedBy            String?
  approvedAt            DateTime?
  rejectedAt            DateTime?
  rejectionReason       String?
  demoSppgId            String?
  demoCreatedAt         DateTime?
  demoExpiresAt         DateTime?
  isConverted           Boolean           @default(false)
  convertedAt           DateTime?
  convertedSppgId       String?
  lastContactAt         DateTime?
  followUpRequired      Boolean           @default(true)
  notes                 String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  actualDate            DateTime?
  assignedAt            DateTime?
  assignedTo            String?
  attendanceStatus      String?
  callsMade             Int               @default(0)
  conversionProbability Float?
  demoDuration          Int               @default(60)
  demoMode              String            @default("ONLINE")
  emailsSent            Int               @default(0)
  feedback              String?
  feedbackScore         Float?
  firstName             String?
  followUpDate          DateTime?
  lastName              String?
  nextSteps             String[]
  preferredTime         String?           @default("MORNING")
  requestMessage        String?
  scheduledDate         DateTime?
  timezone              String            @default("Asia/Jakarta")
  productionSppg        SPPG?             @relation("ConvertedSppg", fields: [convertedSppgId], references: [id])
  demoSppg              SPPG?             @relation("DemoSppg", fields: [demoSppgId], references: [id])
  leadCaptures          LeadCapture[]

  @@index([picEmail, status])
  @@index([status, demoExpiresAt])
  @@index([organizationName])
  @@index([assignedTo, scheduledDate])
  @@index([status, createdAt])
  @@map("demo_requests")
}

model DemoAnalytics {
  id                     String    @id @default(cuid())
  sppgId                 String    @unique
  loginCount             Int       @default(0)
  featuresUsed           String[]
  beneficiariesAdded     Int       @default(0)
  menusCreated           Int       @default(0)
  procurementsCreated    Int       @default(0)
  distributionsCreated   Int       @default(0)
  sessionDuration        Int[]
  lastActiveDate         DateTime?
  totalActiveTime        Int       @default(0)
  averageSessionDuration Float?
  menuPlanningUsage      Json?
  procurementUsage       Json?
  distributionUsage      Json?
  reportingUsage         Json?
  upgradePromptShown     Int       @default(0)
  pricingPageViews       Int       @default(0)
  helpDocumentsViewed    String[]
  supportTicketsCreated  Int       @default(0)
  engagementScore        Float?
  conversionProbability  Float?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  sppg                   SPPG      @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@map("demo_analytics")
}

model PlatformAnalytics {
  id                String   @id @default(cuid())
  date              DateTime @unique @db.Date
  totalUsers        Int      @default(0)
  activeUsers       Int      @default(0)
  newSignups        Int      @default(0)
  churnedUsers      Int      @default(0)
  totalSppg         Int      @default(0)
  activeSppg        Int      @default(0)
  newSppg           Int      @default(0)
  totalRevenue      Float    @default(0)
  newRevenue        Float    @default(0)
  churnedRevenue    Float    @default(0)
  totalSessions     Int      @default(0)
  avgSessionTime    Int      @default(0)
  totalApiCalls     Int      @default(0)
  ticketsCreated    Int      @default(0)
  ticketsResolved   Int      @default(0)
  avgResolutionTime Int      @default(0)
  createdAt         DateTime @default(now())

  @@map("platform_analytics")
}

model SystemConfiguration {
  id             String            @id @default(cuid())
  key            String            @unique
  value          String
  valueType      ConfigValueType   @default(STRING)
  category       ConfigCategory
  description    String?
  isPublic       Boolean           @default(false)
  isRequired     Boolean           @default(false)
  validationRule String?
  defaultValue   String?
  accessLevel    ConfigAccessLevel @default(ADMIN)
  lastModifiedBy String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  @@index([category, isPublic])
  @@map("system_configurations")
}

model FeatureFlag {
  id             String             @id @default(cuid())
  name           String             @unique
  description    String?
  isEnabled      Boolean            @default(false)
  rolloutPercent Int                @default(0)
  targetTiers    SubscriptionTier[]
  targetSppgIds  String[]
  environment    Environment        @default(PRODUCTION)
  createdBy      String
  enabledAt      DateTime?
  disabledAt     DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  usages         FeatureUsage[]

  @@index([isEnabled, environment])
  @@map("feature_flags")
}

model FeatureUsage {
  id            String      @id @default(cuid())
  featureFlagId String
  sppgId        String?
  userId        String?
  usedAt        DateTime    @default(now())
  context       Json?
  featureFlag   FeatureFlag @relation(fields: [featureFlagId], references: [id])
  sppg          SPPG?       @relation(fields: [sppgId], references: [id])
  user          User?       @relation(fields: [userId], references: [id])

  @@index([featureFlagId, usedAt])
  @@map("feature_usages")
}

model DemoFeature {
  id           String   @id @default(cuid())
  name         String   @unique
  displayName  String
  description  String?
  category     String?
  displayOrder Int      @default(0)
  isActive     Boolean  @default(true)
  icon         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("demo_features")
}

model DemoChallenge {
  id           String   @id @default(cuid())
  name         String   @unique
  displayName  String
  description  String?
  category     String?
  severity     String?
  displayOrder Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("demo_challenges")
}

model DemoGoal {
  id           String   @id @default(cuid())
  name         String   @unique
  displayName  String
  description  String?
  category     String?
  impact       String?
  displayOrder Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("demo_goals")
}

model FeedbackStakeholder {
  id                   String           @id @default(cuid())
  sppgId               String
  stakeholderType      StakeholderType
  stakeholderGroup     StakeholderGroup
  name                 String?
  email                String?
  phone                String?
  anonymousId          String?
  schoolId             String?
  programId            String?
  beneficiaryId        String?
  preferredLanguage    String           @default("id")
  communicationChannel String           @default("web")
  consentGiven         Boolean          @default(false)
  dataRetentionConsent Boolean          @default(false)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  feedback             Feedback[]
  sppg                 SPPG             @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, stakeholderType])
  @@index([email])
  @@map("feedback_stakeholders")
}

model Feedback {
  id                       String               @id @default(cuid())
  sppgId                   String
  stakeholderId            String
  subject                  String
  content                  String
  feedbackType             FeedbackType
  category                 FeedbackCategory
  subcategory              String?
  programId                String?
  menuId                   String?
  distributionId           String?
  eventId                  String?
  overallRating            Int?
  specificRatings          Json?
  satisfactionScore        Int?
  recommendationLikelihood Int?
  attachments              String[]
  photos                   String[]
  videos                   String[]
  audioRecording           String?
  aiAnalysis               Json?
  sentimentScore           Float?
  emotionProfile           Json?
  keyTopics                String[]
  urgencyScore             Int                  @default(5)
  complexityScore          Int                  @default(5)
  status                   FeedbackStatus       @default(PENDING)
  priority                 FeedbackPriority     @default(MEDIUM)
  assignedTo               String?
  assignedDepartment       String?
  slaDeadline              DateTime?
  escalationLevel          Int                  @default(0)
  responseRequired         Boolean              @default(true)
  acknowledgedAt           DateTime?
  firstResponseAt          DateTime?
  resolvedAt               DateTime?
  closedAt                 DateTime?
  internalNotes            String?
  publicResponse           String?
  responseTemplate         String?
  resolutionSummary        String?
  actionItems              Json?
  qualityScore             Float?
  complianceFlags          String[]
  reviewRequired           Boolean              @default(false)
  reviewedBy               String?
  reviewedAt               DateTime?
  approvalStatus           ResponseStatus       @default(DRAFT)
  followUpScheduled        DateTime?
  followUpCompleted        Boolean              @default(false)
  satisfactionAfter        Int?
  closureConfirmed         Boolean              @default(false)
  reopenCount              Int                  @default(0)
  sourceChannel            String               @default("web")
  sourceLocation           String?
  deviceInfo               Json?
  referenceNumber          String?
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  distribution             FoodDistribution?    @relation(fields: [distributionId], references: [id])
  menu                     NutritionMenu?       @relation(fields: [menuId], references: [id])
  program                  NutritionProgram?    @relation(fields: [programId], references: [id])
  sppg                     SPPG                 @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  stakeholder              FeedbackStakeholder  @relation(fields: [stakeholderId], references: [id])
  activities               FeedbackActivity[]
  escalations              FeedbackEscalation[]
  responses                FeedbackResponse[]

  @@index([sppgId, status, priority])
  @@index([assignedTo, status])
  @@index([createdAt, urgencyScore])
  @@index([category, subcategory])
  @@index([stakeholderId])
  @@index([slaDeadline])
  @@map("feedback")
}

model FeedbackResponse {
  id             String         @id @default(cuid())
  feedbackId     String
  responseType   ResponseType
  content        String
  responseMethod String
  isPublic       Boolean        @default(true)
  authorId       String
  authorName     String
  authorRole     String
  departmentId   String?
  status         ResponseStatus @default(DRAFT)
  reviewRequired Boolean        @default(false)
  reviewedBy     String?
  reviewedAt     DateTime?
  approvedBy     String?
  approvedAt     DateTime?
  rejectedReason String?
  sentAt         DateTime?
  deliveryStatus DeliveryStatus @default(ASSIGNED)
  readAt         DateTime?
  acknowledgedAt DateTime?
  bounced        Boolean        @default(false)
  qualityScore   Float?
  effectiveness  Int?
  tone           String?
  customerRating Int?
  templateId     String?
  isAutomated    Boolean        @default(false)
  aiAssisted     Boolean        @default(false)
  aiConfidence   Float?
  attachments    String[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  feedback       Feedback       @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  @@index([feedbackId, responseType])
  @@index([authorId, status])
  @@index([sentAt])
  @@map("feedback_responses")
}

model FeedbackEscalation {
  id                   String           @id @default(cuid())
  feedbackId           String
  escalationLevel      Int
  escalationReason     String
  escalationType       EscalationType
  isAutomatic          Boolean          @default(false)
  fromUserId           String?
  fromUserName         String?
  fromDepartment       String?
  toUserId             String
  toUserName           String
  toDepartment         String?
  managerNotified      Boolean          @default(false)
  escalatedAt          DateTime         @default(now())
  expectedResolution   DateTime?
  actualResolution     DateTime?
  slaBreached          Boolean          @default(false)
  breachDuration       Int?
  escalationNotes      String
  urgencyJustification String?
  businessImpact       String?
  customerImpact       String?
  status               EscalationStatus @default(ACTIVE)
  resolvedBy           String?
  resolvedAt           DateTime?
  resolutionNotes      String?
  satisfactory         Boolean?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  feedback             Feedback         @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  @@index([feedbackId, escalationLevel])
  @@index([toUserId, status])
  @@index([escalatedAt])
  @@map("feedback_escalations")
}

model FeedbackActivity {
  id              String       @id @default(cuid())
  feedbackId      String
  activityType    ActivityType
  description     String
  oldValue        String?
  newValue        String?
  fieldChanged    String?
  performedBy     String?
  performedByName String?
  performedByRole String?
  systemGenerated Boolean      @default(false)
  ipAddress       String?
  userAgent       String?
  sessionId       String?
  additionalData  Json?
  createdAt       DateTime     @default(now())
  feedback        Feedback     @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  @@index([feedbackId, createdAt])
  @@index([performedBy])
  @@map("feedback_activities")
}

model FeedbackAnalytics {
  id                     String            @id @default(cuid())
  sppgId                 String
  period                 AnalyticsPeriod
  startDate              DateTime
  endDate                DateTime
  stakeholderType        StakeholderType?
  department             String?
  programId              String?
  category               FeedbackCategory?
  totalFeedback          Int               @default(0)
  newFeedback            Int               @default(0)
  inProgressFeedback     Int               @default(0)
  resolvedFeedback       Int               @default(0)
  escalatedFeedback      Int               @default(0)
  closedFeedback         Int               @default(0)
  averageRating          Float             @default(0)
  satisfactionScore      Float             @default(0)
  sentimentScore         Float             @default(0)
  qualityScore           Float             @default(0)
  averageResponseTime    Float             @default(0)
  averageResolutionTime  Float             @default(0)
  slaComplianceRate      Float             @default(0)
  firstContactResolution Float             @default(0)
  escalationRate         Float             @default(0)
  reopenRate             Float             @default(0)
  categoryDistribution   Json
  priorityDistribution   Json
  channelDistribution    Json
  sourceDistribution     Json
  trendDirection         TrendDirection?
  trendMagnitude         Float?
  seasonalityFactors     Json?
  volatilityIndex        Float?
  forecastNextPeriod     Json?
  riskIndicators         String[]
  recommendations        Json?
  confidenceLevel        Float?
  benchmarkComparison    Json?
  historicalComparison   Json?
  targetAchievement      Json?
  industryPosition       String?
  avgStaffResponseTime   Float             @default(0)
  staffProductivity      Json?
  trainingNeeds          String[]
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  sppg                   SPPG              @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@unique([sppgId, period, startDate, stakeholderType, category])
  @@index([sppgId, period, startDate])
  @@index([startDate, endDate])
  @@map("feedback_analytics")
}

model FeedbackSLA {
  id                     String            @id @default(cuid())
  sppgId                 String
  name                   String
  description            String?
  isActive               Boolean           @default(true)
  priority               Int               @default(1)
  feedbackType           FeedbackType?
  priorityLevel          FeedbackPriority?
  stakeholderType        StakeholderType?
  category               FeedbackCategory?
  urgencyThreshold       Int?
  acknowledgmentTime     Int
  responseTime           Int
  resolutionTime         Int
  closureTime            Int?
  autoEscalationEnabled  Boolean           @default(false)
  escalationTriggers     Json
  escalationMatrix       Json
  minimumQualityScore    Float?
  reviewRequiredAbove    Int?
  managerApprovalNeeded  Boolean           @default(false)
  businessHoursOnly      Boolean           @default(true)
  businessStartHour      Int               @default(8)
  businessEndHour        Int               @default(17)
  excludeWeekends        Boolean           @default(true)
  holidayExclusions      String[]
  reminderIntervals      Int[]
  notifyManagement       Boolean           @default(false)
  criticalAlertThreshold Int?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  sppg                   SPPG              @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, isActive, priority])
  @@map("feedback_slas")
}

model FeedbackTemplate {
  id               String            @id @default(cuid())
  sppgId           String?
  name             String
  description      String?
  isGlobal         Boolean           @default(false)
  isActive         Boolean           @default(true)
  subject          String?
  content          String
  language         String            @default("id")
  feedbackType     FeedbackType?
  category         FeedbackCategory?
  stakeholderType  StakeholderType?
  tags             String[]
  usageCount       Int               @default(0)
  successRate      Float             @default(0)
  lastUsed         DateTime?
  version          String            @default("1.0")
  parentTemplateId String?
  isDeprecated     Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  sppg             SPPG?             @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, isActive])
  @@index([feedbackType, category])
  @@map("feedback_templates")
}

model DocumentCategory {
  id          String             @id @default(cuid())
  name        String
  description String?
  icon        String?
  color       String?
  parentId    String?
  sppgId      String?
  isSystem    Boolean            @default(false)
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  parent      DocumentCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    DocumentCategory[] @relation("CategoryHierarchy")
  sppg        SPPG?              @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  templates   DocumentTemplate[]
  documents   Document[]

  @@unique([name, sppgId])
  @@index([sppgId, isActive])
  @@map("document_categories")
}

model DocumentTypeConfig {
  id                     String             @id @default(cuid())
  name                   String
  description            String?
  allowedMimeTypes       String[]
  maxFileSize            Int
  requiresApproval       Boolean            @default(false)
  requiresSignature      Boolean            @default(false)
  defaultRetentionMonths Int?
  complianceRequired     Boolean            @default(false)
  sppgId                 String?
  isSystem               Boolean            @default(false)
  isActive               Boolean            @default(true)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  templates              DocumentTemplate[]
  sppg                   SPPG?              @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  documents              Document[]

  @@unique([name, sppgId])
  @@index([sppgId, isActive])
  @@map("document_type_configs")
}

model Document {
  id                 String               @id @default(cuid())
  title              String
  description        String?
  fileName           String
  fileUrl            String
  fileSize           Int
  mimeType           String
  checksum           String?
  documentTypeId     String
  categoryId         String
  version            String               @default("1.0")
  majorVersion       Int                  @default(1)
  minorVersion       Int                  @default(0)
  currentVersion     Boolean              @default(true)
  status             DocumentStatus       @default(DRAFT)
  publishedAt        DateTime?
  archivedAt         DateTime?
  tags               String[]
  metadata           Json?
  content            String?
  visibility         DocumentVisibility   @default(PRIVATE)
  permissions        Json?
  complianceCategory String?
  retentionDate      DateTime?
  legalHold          Boolean              @default(false)
  confidential       Boolean              @default(false)
  reviewRequired     Boolean              @default(false)
  reviewInterval     Int?
  nextReviewDate     DateTime?
  expiryDate         DateTime?
  externalReferences Json?
  relatedDocuments   Json?
  sppgId             String
  createdBy          String
  viewCount          Int                  @default(0)
  downloadCount      Int                  @default(0)
  shareCount         Int                  @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  signatures         DigitalSignature[]
  activities         DocumentActivity[]
  approvals          DocumentApproval[]
  comments           DocumentComment[]
  permissions_rel    DocumentPermission[]
  shares             DocumentShare[]
  versions           DocumentVersion[]
  category           DocumentCategory     @relation(fields: [categoryId], references: [id])
  creator            User                 @relation("DocumentCreator", fields: [createdBy], references: [id])
  documentTypeConfig DocumentTypeConfig   @relation(fields: [documentTypeId], references: [id])
  sppg               SPPG                 @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId])
  @@index([categoryId])
  @@index([documentTypeId])
  @@index([createdBy])
  @@index([title])
  @@map("documents")
}

model DocumentVersion {
  id           String            @id @default(cuid())
  documentId   String
  version      String
  majorVersion Int
  minorVersion Int
  isCurrent    Boolean           @default(false)
  fileName     String
  fileUrl      String
  fileSize     Int
  mimeType     String
  checksum     String?
  changes      String?
  changeType   VersionChangeType @default(MINOR)
  previousId   String?
  sppgId       String
  createdBy    String
  createdAt    DateTime          @default(now())
  creator      User              @relation("DocumentVersionCreator", fields: [createdBy], references: [id])
  document     Document          @relation(fields: [documentId], references: [id], onDelete: Cascade)
  previous     DocumentVersion?  @relation("VersionHistory", fields: [previousId], references: [id])
  nextVersions DocumentVersion[] @relation("VersionHistory")
  sppg         SPPG              @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([documentId, version])
  @@index([sppgId])
  @@map("document_versions")
}

model DocumentApproval {
  id           String             @id @default(cuid())
  documentId   String
  approvalType ApprovalType       @default(REVIEW)
  status       ResponseStatus     @default(PENDING_REVIEW)
  priority     ApprovalPriority   @default(MEDIUM)
  workflowStep Int                @default(1)
  isRequired   Boolean            @default(true)
  comments     String?
  conditions   String?
  deadline     DateTime?
  approverId   String
  approvedAt   DateTime?
  rejectedAt   DateTime?
  reason       String?
  sppgId       String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  signatures   DigitalSignature[]
  approver     User               @relation("DocumentApprover", fields: [approverId], references: [id])
  document     Document           @relation(fields: [documentId], references: [id], onDelete: Cascade)
  sppg         SPPG               @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([documentId, status])
  @@index([approverId, status])
  @@index([sppgId])
  @@map("document_approvals")
}

model DigitalSignature {
  id                 String            @id @default(cuid())
  documentId         String
  approvalId         String?
  signatureType      SignatureType     @default(ELECTRONIC)
  signatureData      String
  certificateInfo    Json?
  signerName         String
  signerTitle        String?
  signerEmail        String
  signerIP           String?
  isValid            Boolean           @default(true)
  validatedAt        DateTime?
  invalidatedAt      DateTime?
  invalidationReason String?
  signerId           String
  sppgId             String
  signedAt           DateTime          @default(now())
  createdAt          DateTime          @default(now())
  approval           DocumentApproval? @relation(fields: [approvalId], references: [id])
  document           Document          @relation(fields: [documentId], references: [id], onDelete: Cascade)
  signer             User              @relation("DocumentSigner", fields: [signerId], references: [id])
  sppg               SPPG              @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([signerId])
  @@index([sppgId])
  @@map("digital_signatures")
}

model DocumentPermission {
  id          String    @id @default(cuid())
  documentId  String
  userId      String?
  roleType    UserRole?
  canRead     Boolean   @default(false)
  canWrite    Boolean   @default(false)
  canDelete   Boolean   @default(false)
  canShare    Boolean   @default(false)
  canApprove  Boolean   @default(false)
  canSign     Boolean   @default(false)
  canDownload Boolean   @default(false)
  canPrint    Boolean   @default(false)
  canExport   Boolean   @default(false)
  expiresAt   DateTime?
  sppgId      String
  grantedBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  document    Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  granter     User      @relation("DocumentPermissionGranter", fields: [grantedBy], references: [id])
  sppg        SPPG      @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  user        User?     @relation("DocumentUserPermissions", fields: [userId], references: [id])

  @@unique([documentId, userId])
  @@index([userId])
  @@index([sppgId])
  @@map("document_permissions")
}

model DocumentActivity {
  id          String         @id @default(cuid())
  documentId  String
  action      DocumentAction
  description String?
  metadata    Json?
  userId      String
  userAgent   String?
  ipAddress   String?
  sppgId      String
  createdAt   DateTime       @default(now())
  document    Document       @relation(fields: [documentId], references: [id], onDelete: Cascade)
  sppg        SPPG           @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  user        User           @relation("DocumentActivityUser", fields: [userId], references: [id])

  @@index([documentId, action])
  @@index([userId])
  @@index([sppgId])
  @@index([createdAt])
  @@map("document_activities")
}

model DocumentComment {
  id          String            @id @default(cuid())
  documentId  String
  content     String
  commentType CommentType       @default(GENERAL)
  parentId    String?
  isResolved  Boolean           @default(false)
  resolvedBy  String?
  resolvedAt  DateTime?
  authorId    String
  sppgId      String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  author      User              @relation("CommentAuthor", fields: [authorId], references: [id])
  document    Document          @relation(fields: [documentId], references: [id], onDelete: Cascade)
  parent      DocumentComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     DocumentComment[] @relation("CommentReplies")
  resolver    User?             @relation("CommentResolver", fields: [resolvedBy], references: [id])
  sppg        SPPG              @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([documentId])
  @@index([authorId])
  @@index([sppgId])
  @@map("document_comments")
}

model DocumentShare {
  id             String    @id @default(cuid())
  documentId     String
  shareToken     String    @unique
  shareType      ShareType @default(LINK)
  password       String?
  expiresAt      DateTime?
  maxDownloads   Int?
  downloadCount  Int       @default(0)
  canDownload    Boolean   @default(true)
  canView        Boolean   @default(true)
  canComment     Boolean   @default(false)
  recipientEmail String?
  recipientName  String?
  message        String?
  isActive       Boolean   @default(true)
  sharedBy       String
  sppgId         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastAccessedAt DateTime?
  document       Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  sharer         User      @relation("DocumentSharer", fields: [sharedBy], references: [id])
  sppg           SPPG      @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([shareToken])
  @@index([documentId])
  @@index([sppgId])
  @@map("document_shares")
}

model DocumentTemplate {
  id                 String             @id @default(cuid())
  name               String
  description        String?
  templateUrl        String
  fileName           String
  fileSize           Int
  mimeType           String
  documentTypeId     String
  categoryId         String
  fields             Json?
  defaultValues      Json?
  validation         Json?
  isActive           Boolean            @default(true)
  isOfficial         Boolean            @default(false)
  usageCount         Int                @default(0)
  sppgId             String?
  createdBy          String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  category           DocumentCategory   @relation(fields: [categoryId], references: [id])
  creator            User               @relation("TemplateCreator", fields: [createdBy], references: [id])
  documentTypeConfig DocumentTypeConfig @relation(fields: [documentTypeId], references: [id])
  sppg               SPPG?              @relation(fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([documentTypeId])
  @@index([sppgId])
  @@map("document_templates")
}

model DataRetentionPolicy {
  id              String   @id @default(cuid())
  policyName      String   @unique @db.VarChar(100)
  description     String
  dataType        String   @db.VarChar(50)
  retentionDays   Int
  autoDelete      Boolean  @default(false)
  archiveBefore   Boolean  @default(true)
  regulationBasis String[] @db.VarChar(50)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @db.Timestamptz(6)

  @@index([dataType, isActive])
  @@map("data_retention_policies")
}

model UserConsent {
  id             String    @id @default(cuid())
  userId         String    @db.VarChar(50)
  consentType    String    @db.VarChar(50)
  consentGiven   Boolean
  consentVersion String    @db.VarChar(20)
  ipAddress      String?   @db.Inet
  userAgent      String?
  geoLocation    Json?
  consentDate    DateTime  @default(now()) @db.Timestamptz(6)
  withdrawalDate DateTime? @db.Timestamptz(6)
  expiryDate     DateTime? @db.Timestamptz(6)
  legalBasis     String?   @db.VarChar(100)
  user           User      @relation("UserConsents", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, consentType])
  @@index([consentDate, consentType])
  @@index([expiryDate, consentGiven])
  @@map("user_consents")
}

model SystemHealthMetrics {
  id                String   @id @default(cuid())
  metricName        String   @db.VarChar(100)
  metricValue       Float
  metricUnit        String   @db.VarChar(20)
  warningThreshold  Float?
  criticalThreshold Float?
  instanceId        String?  @db.VarChar(50)
  region            String?  @db.VarChar(20)
  timestamp         DateTime @default(now()) @db.Timestamptz(6)

  @@index([metricName, timestamp])
  @@index([timestamp])
  @@index([instanceId, metricName])
  @@map("system_health_metrics")
}

model EncryptionKey {
  id           String    @id @default(cuid())
  keyVersion   Int       @unique
  keyAlgorithm String    @db.VarChar(50)
  keyPurpose   String    @db.VarChar(50)
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now()) @db.Timestamptz(6)
  rotatedAt    DateTime? @db.Timestamptz(6)
  expiresAt    DateTime? @db.Timestamptz(6)
  keyHash      String    @db.VarChar(255)
  rotationDue  Boolean   @default(false)

  @@index([keyVersion, isActive])
  @@index([keyPurpose, isActive])
  @@index([expiresAt, rotationDue])
  @@map("encryption_keys")
}

model SecurityIncident {
  id              String    @id @default(cuid())
  incidentType    String    @db.VarChar(50)
  severity        String    @db.VarChar(20)
  status          String    @db.VarChar(20)
  title           String    @db.VarChar(255)
  description     String
  affectedSystems String[]  @db.VarChar(50)
  affectedUsers   String[]  @db.VarChar(50)
  dataCompromised Boolean   @default(false)
  serviceImpacted Boolean   @default(false)
  customerImpact  Int       @default(0)
  responseActions Json?
  mitigationSteps Json?
  detectedAt      DateTime  @db.Timestamptz(6)
  reportedAt      DateTime? @db.Timestamptz(6)
  resolvedAt      DateTime? @db.Timestamptz(6)
  assignedTo      String?   @db.VarChar(50)
  reportedBy      String?   @db.VarChar(50)

  @@index([incidentType, severity])
  @@index([status, severity])
  @@index([detectedAt, severity])
  @@map("security_incidents")
}

model PerformanceBaseline {
  id                String    @id @default(cuid())
  metricName        String    @db.VarChar(100)
  baselineValue     Float
  measurementUnit   String    @db.VarChar(20)
  environment       String    @db.VarChar(20)
  timeWindow        String    @db.VarChar(20)
  warningThreshold  Float     @default(20)
  criticalThreshold Float     @default(50)
  validFrom         DateTime  @db.Timestamptz(6)
  validUntil        DateTime? @db.Timestamptz(6)
  isActive          Boolean   @default(true)

  @@index([metricName, environment])
  @@index([validFrom, validUntil])
  @@map("performance_baselines")
}

model Supplier {
  id                    String               @id @default(cuid())
  sppgId                String               @db.VarChar(50)
  supplierCode          String               @unique @db.VarChar(20)
  supplierName          String               @db.VarChar(255)
  businessName          String?              @db.VarChar(255)
  supplierType          SupplierType
  category              String               @db.VarChar(100)
  primaryContact        String               @db.VarChar(255)
  phone                 String               @db.VarChar(20)
  email                 String?              @db.VarChar(255)
  whatsapp              String?              @db.VarChar(20)
  website               String?              @db.VarChar(255)
  address               String
  city                  String               @db.VarChar(100)
  province              String               @db.VarChar(100)
  postalCode            String?              @db.VarChar(10)
  coordinates           String?              @db.VarChar(50)
  deliveryRadius        Float?
  businessLicense       String?              @db.VarChar(255)
  taxId                 String?              @db.VarChar(50)
  hallaLicense          String?              @db.VarChar(255)
  foodSafetyLicense     String?              @db.VarChar(255)
  paymentTerms          String               @default("CASH_ON_DELIVERY") @db.VarChar(50)
  creditLimit           Float?               @default(0)
  currency              String               @default("IDR") @db.VarChar(3)
  bankAccount           String?              @db.VarChar(50)
  bankName              String?              @db.VarChar(100)
  overallRating         Float                @default(0)
  qualityRating         Float                @default(0)
  deliveryRating        Float                @default(0)
  priceCompetitiveness  Float                @default(0)
  serviceRating         Float                @default(0)
  totalOrders           Int                  @default(0)
  successfulDeliveries  Int                  @default(0)
  failedDeliveries      Int                  @default(0)
  averageDeliveryTime   Int?
  onTimeDeliveryRate    Float                @default(0)
  totalPurchaseValue    Float                @default(0)
  minOrderValue         Float?               @default(0)
  maxOrderCapacity      Float?
  leadTimeHours         Int?                 @default(24)
  deliveryDays          String[]             @db.VarChar(10)
  specialties           String[]             @db.VarChar(100)
  certifications        String[]             @db.VarChar(100)
  isActive              Boolean              @default(true)
  isPreferred           Boolean              @default(false)
  isBlacklisted         Boolean              @default(false)
  blacklistReason       String?
  lastAuditDate         DateTime?            @db.Timestamptz(6)
  nextAuditDue          DateTime?            @db.Timestamptz(6)
  isHalalCertified      Boolean              @default(false)
  isFoodSafetyCertified Boolean              @default(false)
  isISOCertified        Boolean              @default(false)
  complianceStatus      String               @default("PENDING") @db.VarChar(20)
  lastInspectionDate    DateTime?            @db.Timestamptz(6)
  partnershipLevel      String               @default("STANDARD") @db.VarChar(20)
  contractStartDate     DateTime?            @db.Timestamptz(6)
  contractEndDate       DateTime?            @db.Timestamptz(6)
  relationshipManager   String?              @db.VarChar(255)
  hasAPIIntegration     Boolean              @default(false)
  apiEndpoint           String?              @db.VarChar(255)
  supportsEDI           Boolean              @default(false)
  preferredOrderMethod  String               @default("PHONE") @db.VarChar(20)
  encryptedBankDetails  String?              @db.VarChar(500)
  encryptedContracts    String?              @db.VarChar(500)
  createdAt             DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime             @updatedAt @db.Timestamptz(6)
  lastContactDate       DateTime?            @db.Timestamptz(6)
  inventoryItems        InventoryItem[]      @relation("SupplierItems")
  procurements          Procurement[]        @relation("SupplierProcurements")
  supplierContracts     SupplierContract[]
  supplierEvaluations   SupplierEvaluation[]
  supplierProducts      SupplierProduct[]
  sppg                  SPPG                 @relation("SppgSuppliers", fields: [sppgId], references: [id], onDelete: Cascade)

  @@index([sppgId, isActive])
  @@index([supplierCode, sppgId])
  @@index([supplierType, category, isActive])
  @@index([isPreferred, overallRating])
  @@index([complianceStatus, lastInspectionDate])
  @@index([partnershipLevel, contractEndDate])
  @@index([deliveryRating, onTimeDeliveryRate])
  @@index([isActive, isBlacklisted])
  @@index([city, province, deliveryRadius])
  @@index([minOrderValue, maxOrderCapacity])
  @@index([nextAuditDue, complianceStatus])
  @@index([createdAt, sppgId])
  @@map("suppliers")
}

model SupplierEvaluation {
  id               String   @id @default(cuid())
  supplierId       String   @db.VarChar(50)
  sppgId           String   @db.VarChar(50)
  evaluationType   String   @db.VarChar(50)
  evaluationPeriod String   @db.VarChar(20)
  qualityScore     Float
  deliveryScore    Float
  serviceScore     Float
  priceScore       Float
  complianceScore  Float
  overallScore     Float
  strengths        String?
  weaknesses       String?
  recommendations  String?
  actionItems      Json?
  orderVolume      Float?
  orderValue       Float?
  deliveryCount    Int      @default(0)
  complaintCount   Int      @default(0)
  status           String   @default("DRAFT") @db.VarChar(20)
  evaluatedBy      String   @db.VarChar(50)
  approvedBy       String?  @db.VarChar(50)
  evaluationDate   DateTime @db.Timestamptz(6)
  createdAt        DateTime @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @db.Timestamptz(6)
  sppg             SPPG     @relation("SupplierEvaluations", fields: [sppgId], references: [id], onDelete: Cascade)
  supplier         Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([supplierId, evaluationPeriod])
  @@index([sppgId, evaluationType])
  @@index([overallScore, evaluationDate])
  @@map("supplier_evaluations")
}

model SupplierContract {
  id                String    @id @default(cuid())
  supplierId        String    @db.VarChar(50)
  sppgId            String    @db.VarChar(50)
  contractNumber    String    @unique @db.VarChar(50)
  contractType      String    @db.VarChar(50)
  contractStatus    String    @default("DRAFT") @db.VarChar(20)
  startDate         DateTime  @db.Timestamptz(6)
  endDate           DateTime  @db.Timestamptz(6)
  autoRenew         Boolean   @default(false)
  renewalPeriod     Int?
  contractValue     Float?
  paymentTerms      String    @db.VarChar(100)
  currency          String    @default("IDR") @db.VarChar(3)
  priceAdjustment   String?   @db.VarChar(100)
  deliveryTimeframe String    @db.VarChar(100)
  qualityStandards  String?
  penaltyTerms      String?
  bonusTerms        String?
  governingLaw      String?   @db.VarChar(100)
  disputeResolution String?   @db.VarChar(100)
  confidentiality   Boolean   @default(true)
  contractDocument  String?   @db.VarChar(255)
  signedBy          String?   @db.VarChar(255)
  witnessedBy       String?   @db.VarChar(255)
  signedDate        DateTime? @db.Timestamptz(6)
  createdAt         DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime  @updatedAt @db.Timestamptz(6)
  sppg              SPPG      @relation("SupplierContracts", fields: [sppgId], references: [id], onDelete: Cascade)
  supplier          Supplier  @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([supplierId, contractStatus])
  @@index([sppgId, contractType])
  @@index([endDate, autoRenew])
  @@map("supplier_contracts")
}

model SupplierProduct {
  id               String        @id @default(cuid())
  supplierId       String        @db.VarChar(50)
  sppgId           String        @db.VarChar(50)
  productCode      String        @db.VarChar(50)
  productName      String        @db.VarChar(255)
  category         String        @db.VarChar(100)
  subcategory      String?       @db.VarChar(100)
  description      String?
  unit             String        @db.VarChar(20)
  packagingType    String?       @db.VarChar(50)
  shelfLife        Int?
  storageCondition String?       @db.VarChar(100)
  basePrice        Float
  currency         String        @default("IDR") @db.VarChar(3)
  pricePerUnit     Float
  minimumOrder     Float?        @default(0)
  maximumOrder     Float?
  isAvailable      Boolean       @default(true)
  leadTimeHours    Int           @default(24)
  stockLevel       String        @default("AVAILABLE") @db.VarChar(20)
  hasHalalCert     Boolean       @default(false)
  hasOrganicCert   Boolean       @default(false)
  qualityGrade     QualityGrade?
  certifications   String[]      @db.VarChar(100)
  createdAt        DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime      @updatedAt @db.Timestamptz(6)
  lastPriceUpdate  DateTime?     @db.Timestamptz(6)
  sppg             SPPG          @relation("SupplierCatalogs", fields: [sppgId], references: [id], onDelete: Cascade)
  supplier         Supplier      @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([supplierId, productCode])
  @@index([supplierId, category])
  @@index([sppgId, isAvailable])
  @@index([category, isAvailable])
  @@map("supplier_products")
}

enum SppgStatus {
  PENDING_APPROVAL
  ACTIVE
  SUSPENDED
  TERMINATED
  INACTIVE
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  OVERDUE
  CANCELLED
  PAUSED
  UPGRADE_PENDING
}

enum SubscriptionTier {
  BASIC
  STANDARD
  PRO
  ENTERPRISE
}

enum OrganizationType {
  PEMERINTAH
  SWASTA
  YAYASAN
  KOMUNITAS
  LAINNYA
}

enum SchoolType {
  SD
  SMP
  SMA
  SMK
  MI
  MTS
  MA
  PAUD
  TK
  SLB
  PONDOK_PESANTREN
  LAINNYA
}

enum SchoolStatus {
  NEGERI
  SWASTA
  TERAKREDITASI_A
  TERAKREDITASI_B
  TERAKREDITASI_C
  BELUM_TERAKREDITASI
}

enum SchoolServingMethod {
  CAFETERIA
  CLASSROOM
  OUTDOOR
  TAKEAWAY
  HYBRID
}

enum UserType {
  SUPERADMIN
  SPPG_ADMIN
  SPPG_USER
  DEMO_REQUEST
  PROSPECT
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum SubscriptionChangeType {
  UPGRADE
  DOWNGRADE
  RENEWAL
  CANCELLATION
  REACTIVATION
  PAUSE
  RESUME
}

enum BillingFrequency {
  MONTHLY
  QUARTERLY
  YEARLY
  CUSTOM
}

enum PaymentMethodType {
  CREDIT_CARD
  BANK_TRANSFER
  E_WALLET
  MANUAL
  CRYPTO
}

enum DashboardStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  DISABLED
}

enum ReportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum DunningStage {
  FIRST_REMINDER
  SECOND_REMINDER
  FINAL_NOTICE
  SUSPENSION_WARNING
  SUSPENDED
  TERMINATION
}

enum IndonesiaRegion {
  SUMATERA
  JAWA
  KALIMANTAN
  SULAWESI
  PAPUA
  BALI_NUSRA
  MALUKU
}

enum Timezone {
  WIB
  WITA
  WIT
}

enum RegencyType {
  REGENCY
  CITY
}

enum VillageType {
  URBAN_VILLAGE
  RURAL_VILLAGE
}

enum UsageResourceType {
  RECIPIENTS
  STAFF
  DISTRIBUTION_POINTS
  API_CALLS
  STORAGE_GB
  REPORTS_GENERATED
  MENUS_CREATED
}

enum TrialNotificationType {
  WELCOME
  DAY_7_REMINDER
  DAY_3_REMINDER
  DAY_1_REMINDER
  EXPIRED
  EXTENSION_GRANTED
}

enum BillingCycleStatus {
  PENDING
  INVOICED
  PAID
  OVERDUE
  CANCELLED
}

enum SupportTicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_CUSTOMER
  RESOLVED
  CLOSED
}

enum SupportTicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SupportTicketCategory {
  TECHNICAL
  BILLING
  FEATURE_REQUEST
  BUG_REPORT
  GENERAL
}

enum NotificationType {
  EMAIL
  IN_APP
  SMS
  PUSH
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
  NOTIFICATION_SEND
  NOTIFICATION_TEMPLATE_CREATE
  BULK_NOTIFICATION_PROCESS
  NOTIFICATION_PREFERENCES_UPDATE
  SUBMIT_FOR_REVIEW
  APPROVE_PLAN
  REJECT_PLAN
  PUBLISH_PLAN
  CREATE_USER
  UPDATE_USER
  DELETE_USER
  CHANGE_PASSWORD
  RESET_PASSWORD
  ACTIVATE_USER
  DEACTIVATE_USER
}

enum DemoRequestStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  DEMO_ACTIVE
  EXPIRED
  CONVERTED
  CANCELLED
}

enum DemoType {
  STANDARD
  EXTENDED
  GUIDED
  SELF_SERVICE
}

enum ProgramType {
  NUTRITIONAL_RECOVERY
  NUTRITIONAL_EDUCATION
  FREE_NUTRITIOUS_MEAL
  EMERGENCY_NUTRITION
  STUNTING_INTERVENTION
}

enum ProgramStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
  ARCHIVED
}

enum TargetGroup {
  TODDLER
  PREGNANT_WOMAN
  BREASTFEEDING_MOTHER
  TEENAGE_GIRL
  ELDERLY
  SCHOOL_CHILDREN
}

enum MealType {
  SARAPAN
  MAKAN_SIANG
  SNACK_PAGI
  SNACK_SORE
  MAKAN_MALAM
}

enum MenuDifficulty {
  EASY
  MEDIUM
  HARD
}

enum CookingMethod {
  STEAM
  BOIL
  FRY
  BAKE
  GRILL
  ROAST
  SAUTE
  STIR_FRY
}

enum NutritionStatus {
  WELL_NOURISHED
  UNDERNOURISHED
  SEVERELY_UNDERNOURISHED
  OVER_NOURISHED
  OBESE
}

enum ProductionStatus {
  PLANNED
  PREPARING
  COOKING
  QUALITY_CHECK
  COMPLETED
  CANCELLED
}

enum DistributionStatus {
  SCHEDULED
  PREPARING
  IN_TRANSIT
  DISTRIBUTING
  COMPLETED
  CANCELLED
}

enum DeliveryStatus {
  ASSIGNED // Driver assigned, ready to depart
  DEPARTED // Left distribution center
  DELIVERED // Successfully delivered
  FAILED // Delivery failed
  CANCELLED // Delivery cancelled
}

enum IssueType {
  VEHICLE_BREAKDOWN
  WEATHER_DELAY
  TRAFFIC_JAM
  ACCESS_DENIED
  RECIPIENT_UNAVAILABLE
  FOOD_QUALITY
  SHORTAGE
  OTHER
}

enum IssueSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum PhotoType {
  VEHICLE_BEFORE
  VEHICLE_AFTER
  FOOD_QUALITY
  DELIVERY_PROOF
  RECIPIENT
  OTHER
}

enum ProcurementStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  ORDERED
  PARTIALLY_RECEIVED
  FULLY_RECEIVED
  COMPLETED
  CANCELLED
  REJECTED
}

enum ProcurementMethod {
  DIRECT
  TENDER
  CONTRACT
  EMERGENCY
  BULK
}

enum SupplierType {
  LOCAL
  REGIONAL
  NATIONAL
  INTERNATIONAL
  COOPERATIVE
  INDIVIDUAL
}

enum QualityGrade {
  EXCELLENT
  GOOD
  FAIR
  POOR
  REJECTED
}

enum BeneficiaryType {
  CHILD
  PREGNANT_MOTHER
  LACTATING_MOTHER
  ELDERLY
  DISABILITY
}

enum FeedbackType {
  COMPLAINT
  SUGGESTION
  COMPLIMENT
  INQUIRY
  INCIDENT_REPORT
  QUALITY_ISSUE
  SERVICE_ISSUE
  SERVICE_REQUEST
  PORTION_ISSUE
  NUTRITION_CONCERN
  FEATURE_REQUEST
  BUG_REPORT
  COMPLIANCE_CONCERN
}

enum FeedbackStatus {
  PENDING
  IN_REVIEW
  RESPONDED
  RESOLVED
  CLOSED
  ESCALATED
}

enum FeedbackPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum StakeholderType {
  STUDENT
  PARENT_GUARDIAN
  TEACHER
  SCHOOL_PRINCIPAL
  COMMUNITY_LEADER
  FOOD_SUPPLIER
  LOGISTICS_PARTNER
  KITCHEN_STAFF
  DISTRIBUTION_STAFF
  QC_STAFF
  NUTRITIONIST
  PROGRAM_MANAGER
  SPPG_HEAD
  CUSTOMER_SUCCESS
  TECHNICAL_SUPPORT
}

enum StakeholderGroup {
  BENEFICIARIES
  FAMILIES
  EDUCATION_PARTNERS
  SUPPLIERS
  OPERATIONAL_STAFF
  MANAGEMENT
  PLATFORM_TEAM
}

enum FeedbackCategory {
  FOOD_QUALITY
  FOOD_SAFETY
  NUTRITION_COMPLIANCE
  SERVICE_DELIVERY
  STAFF_PERFORMANCE
  LOGISTICS_EFFICIENCY
  PROGRAM_EFFECTIVENESS
  TECHNOLOGY_ISSUES
  BILLING_INQUIRY
  POLICY_FEEDBACK
}

enum ResponseType {
  INTERNAL_NOTE
  PUBLIC_RESPONSE
  ESCALATION
  AUTO_GENERATED
  TEMPLATE_BASED
  PERSONALIZED
}

enum ResponseStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  SENT
  DELIVERED
  READ
  ACKNOWLEDGED
  REJECTED
}

enum EscalationType {
  TIME_BASED
  COMPLEXITY_BASED
  VIP_STAKEHOLDER
  COMPLIANCE_ISSUE
  REPUTATION_RISK
  MANUAL_OVERRIDE
}

enum EscalationStatus {
  ACTIVE
  RESOLVED
  CANCELLED
  TRANSFERRED
}

enum ActivityType {
  STATUS_CHANGE
  ASSIGNMENT_CHANGE
  RESPONSE_ADDED
  ESCALATION_CREATED
  PRIORITY_CHANGE
  DEADLINE_UPDATED
  NOTE_ADDED
  ATTACHMENT_ADDED
  REVIEW_COMPLETED
  APPROVAL_GRANTED
  CLOSURE_INITIATED
}

enum AnalyticsPeriod {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum DistributionMethod {
  DIRECT
  PICKUP
  DELIVERY
  MOBILE_UNIT
}

enum VehicleType {
  MOTOR
  MOBIL
  MINIBUS
  TRUCK
  PICKUP
  JALAN_KAKI
  SEPEDA
  BECAK
  DELMAN
  BOX_CAR
  REFRIGERATED
  VAN
  TRUCK_ENGKEL
  TRUCK_DOUBLE
  MOTORCYCLE
  CARGO_BIKE
  MANUAL_DELIVERY
  OTHER
}

enum VehicleStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  BROKEN
  RETIRED
}

enum VehicleOwnership {
  OWNED
  RENTED
  BORROWED
  VOLUNTEER
}

enum FuelType {
  BENSIN
  SOLAR
  PERTALITE
  PERTAMAX
  ELECTRIC
  NONE
}

enum EntityType {
  USER
  SPPG
  SUBSCRIPTION
  PAYMENT
  MENU_PLAN
  PRODUCTION
  DISTRIBUTION
  PROCUREMENT
  BENEFICIARY
  FEEDBACK
  SUPPLIER
  INVENTORY
  RECIPE
  DOCUMENT
  NOTIFICATION
  AUDIT_LOG
}

enum PreparationMethod {
  STEAM
  BOIL
  FRY
  SAUTE
  GRILL
  BAKE
  RAW
  BLEND
  STIR_FRY
  ROAST
}

enum ComplianceStandard {
  HACCP
  ISO_22000
  HALAL_MUI
  SNI
  CODEX
  BPOM
  LOCAL_REGULATION
}

enum QualityStatus {
  PASSED
  FAILED
  CONDITIONAL
  RETESTING
}

enum InspectionType {
  INCOMING
  IN_PROCESS
  FINAL
  RANDOM
  COMPLAINT
}

enum InventoryCategory {
  PROTEIN
  KARBOHIDRAT
  SAYURAN
  BUAH
  SUSU_OLAHAN
  BUMBU_REMPAH
  MINYAK_LEMAK
  LAINNYA
}

enum MovementType {
  IN
  OUT
  ADJUSTMENT
  EXPIRED
  DAMAGED
  TRANSFER
}

enum EmploymentType {
  PERMANENT
  CONTRACT
  TEMPORARY
  INTERN
  FREELANCE
}

enum EmploymentStatus {
  ACTIVE
  PROBATION
  SUSPENDED
  TERMINATED
  RESIGNED
  RETIRED
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum Gender {
  MALE
  FEMALE
}

enum AgeGroup {
  BALITA_6_23
  BALITA_2_5
  ANAK_6_12
  REMAJA_13_18
  DEWASA_19_59
  LANSIA_60_PLUS
}

enum ActivityLevel {
  SEDENTARY
  LIGHT
  MODERATE
  ACTIVE
  VERY_ACTIVE
}

enum MenuPlanStatus {
  DRAFT
  PENDING_REVIEW
  REVIEWED
  PENDING_APPROVAL
  APPROVED
  PUBLISHED
  ACTIVE
  COMPLETED
  ARCHIVED
  CANCELLED
}

enum AssignmentStatus {
  PLANNED
  CONFIRMED
  IN_PRODUCTION
  PRODUCED
  DISTRIBUTED
  COMPLETED
  CANCELLED
  SUBSTITUTED
}

enum LeaveType {
  ANNUAL
  SICK
  EMERGENCY
  MATERNITY
  PATERNITY
  UNPAID
  STUDY
  PILGRIMAGE
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  EXPIRED
}

enum AttendanceStatus {
  PRESENT
  LATE
  ABSENT
  HALF_DAY
  OVERTIME
  SICK_LEAVE
  ANNUAL_LEAVE
}

enum PayrollStatus {
  DRAFT
  CALCULATED
  APPROVED
  PAID
  CANCELLED
}

enum ReviewType {
  PROBATION
  QUARTERLY
  ANNUAL
  SPECIAL
  EXIT
}

enum EmployeeLevel {
  STAFF
  SUPERVISOR
  MANAGER
  SENIOR_MANAGER
  DIRECTOR
  EXECUTIVE
}

enum DocumentType {
  ID_CARD
  PASSPORT
  DRIVER_LICENSE
  CERTIFICATE
  DIPLOMA
  RESUME
  CONTRACT
  MEDICAL_CHECKUP
  OTHER
}

enum TrainingStatus {
  PLANNED
  ONGOING
  COMPLETED
  CANCELLED
  POSTPONED
}

enum DistributionWave {
  MORNING
  MIDDAY
}

enum BanperRequestStatus {
  DRAFT
  SUBMITTED
  REVIEWED
  APPROVED
  DISBURSED
  REJECTED
}

enum ReportType {
  DAILY_OPERATIONAL
  FINANCIAL_BIWEEKLY
  BENEFICIARY_RECEIPT
  QUALITY_CONTROL
  DISTRIBUTION_SUMMARY
  MONTHLY_EVALUATION
}

enum ReceiptStatus {
  PENDING
  RECEIVED
  LOST
  DISPUTED
}

enum SppgRole {
  KEPALA_SPPG
  AHLI_GIZI
  AKUNTAN
  PENGAWAS_DISTRIBUSI
  TIM_PERSIAPAN
  TIM_PENGOLAHAN
  TIM_PEMORSIAN
  TIM_PACKING
  TIM_DISTRIBUSI
  TIM_KEBERSIHAN
  TIM_PENCUCI
}

enum BeneficiaryCategory {
  TODDLER
  EARLY_CHILDHOOD
  KINDERGARTEN
  ELEMENTARY_GRADE_1_3
  ELEMENTARY_GRADE_4_6
  JUNIOR_HIGH
  SENIOR_HIGH
  PREGNANT_WOMAN
  BREASTFEEDING_MOTHER
}

enum EquipmentCategory {
  GAS_STOVE
  ELECTRIC_STOVE
  REFRIGERATOR
  FREEZER
  MIXER
  BLENDER
  RICE_COOKER
  PRESSURE_COOKER
  OVEN
  STEAMER
  CUTTING_BOARD
  KNIVES_SET
  SCALES
  GENERATOR
  WATER_PURIFIER
  PACKAGING_MACHINE
}

enum EquipmentCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  BROKEN
}

enum EquipmentStatus {
  ACTIVE
  MAINTENANCE
  RETIRED
  ON_LOAN
}

enum MaintenanceType {
  ROUTINE
  REPAIR
  EMERGENCY
  CALIBRATION
  REPLACEMENT
}

enum WaterQualityStatus {
  EXCELLENT
  GOOD
  NEEDS_TREATMENT
  FAILED
}

enum InternetStatus {
  ACTIVE
  DOWN
  SLOW
  MAINTENANCE
}

enum TestType {
  WATER_QUALITY
  FOOD_SAMPLE
  NUTRITION_ANALYSIS
  MICROBIOLOGICAL
  CHEMICAL_RESIDUE
  HEAVY_METALS
}

enum TestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
  RETESTING
  CANCELLED
}

enum CertificationStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  REVOKED
  RENEWAL_PENDING
}

enum ResearchType {
  NUTRITION_OPTIMIZATION
  LOCAL_INGREDIENT
  COST_EFFICIENCY
  TASTE_IMPROVEMENT
  CULTURAL_ADAPTATION
}

enum ResearchStatus {
  PLANNING
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum AnalyticsType {
  COST_ANALYSIS
  EFFICIENCY_ANALYSIS
  QUALITY_TRENDS
  NUTRITION_COMPLIANCE
  WASTE_ANALYSIS
  BENEFICIARY_SATISFACTION
}

enum TrendDirection {
  INCREASING
  DECREASING
  STABLE
  VOLATILE
}

enum BenchmarkType {
  REGIONAL
  NATIONAL
  SIMILAR_SIZE
  BEST_PRACTICE
}

enum UserRole {
  PLATFORM_SUPERADMIN
  PLATFORM_SUPPORT
  PLATFORM_ANALYST
  SPPG_KEPALA
  SPPG_ADMIN
  SPPG_AHLI_GIZI
  SPPG_AKUNTAN
  SPPG_PRODUKSI_MANAGER
  SPPG_DISTRIBUSI_MANAGER
  SPPG_HRD_MANAGER
  SPPG_STAFF_DAPUR
  SPPG_STAFF_DISTRIBUSI
  SPPG_STAFF_ADMIN
  SPPG_STAFF_QC
  SPPG_VIEWER
  DEMO_USER
}

enum PermissionType {
  READ
  WRITE
  DELETE
  APPROVE
  USER_MANAGE
  ROLE_ASSIGN
  SETTINGS_MANAGE
  MENU_MANAGE
  PROCUREMENT_MANAGE
  PRODUCTION_MANAGE
  DISTRIBUTION_MANAGE
  QUALITY_MANAGE
  FINANCIAL_MANAGE
  HR_MANAGE
  REPORTS_VIEW
  REPORTS_GENERATE
  ANALYTICS_VIEW
  ANALYTICS_ADVANCED
  SYSTEM_CONFIG
  DATA_EXPORT
  DATA_IMPORT
  AUDIT_LOG_VIEW
  NOTIFICATION_SEND
  NOTIFICATION_TEMPLATE_MANAGE
  NOTIFICATION_BULK_PROCESS
  INVENTORY_VIEW
  INVENTORY_MANAGE
  INVENTORY_APPROVE
}

enum DocumentStatus {
  DRAFT
  UNDER_REVIEW
  APPROVED
  REJECTED
  ARCHIVED
  EXPIRED
  WITHDRAWN
}

enum DocumentVisibility {
  PRIVATE
  INTERNAL
  PUBLIC
  CONFIDENTIAL
}

enum VersionChangeType {
  MAJOR
  MINOR
  PATCH
  HOTFIX
}

enum ApprovalType {
  REVIEW
  APPROVAL
  SIGNATURE
  COMPLIANCE
  LEGAL
}

enum ApprovalPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL
}

enum SignatureType {
  ELECTRONIC
  DIGITAL
  BIOMETRIC
  HANDWRITTEN
}

enum DocumentAction {
  CREATED
  VIEWED
  DOWNLOADED
  UPDATED
  DELETED
  SHARED
  APPROVED
  REJECTED
  SIGNED
  COMMENTED
  EXPORTED
  PRINTED
}

enum CommentType {
  GENERAL
  SUGGESTION
  ISSUE
  QUESTION
  APPROVAL
}

enum ShareType {
  LINK
  EMAIL
  DIRECT
  PUBLIC
}

enum UserDemoStatus {
  REQUESTED
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CONVERTED
  EXPIRED
  CANCELLED
}

enum AccessLevel {
  FULL
  LIMITED
  READ_ONLY
  NO_ACCESS
}

enum ABTestStatus {
  DRAFT
  RUNNING
  PAUSED
  COMPLETED
  ARCHIVED
}

enum ABTestMetric {
  CONVERSION_RATE
  CLICK_THROUGH_RATE
  BOUNCE_RATE
  ENGAGEMENT_TIME
  FORM_SUBMISSIONS
}

enum TemplateCategory {
  HEALTHCARE
  BUSINESS
  EDUCATION
  GOVERNMENT
  NONPROFIT
  ECOMMERCE
  TECHNOLOGY
  FINANCE
  LEGAL
  REAL_ESTATE
}

enum LandingPageTemplate {
  DEFAULT
  GOVERNMENT
  CORPORATE
  NGO
  STARTUP
}

enum TargetAudience {
  GENERAL
  GOVERNMENT
  CORPORATE
  NGO
  HEALTHCARE
  EDUCATION
}

enum BlogCategory {
  NEWS
  CASE_STUDY
  TUTORIAL
  INDUSTRY
  REGULATION
  TECHNOLOGY
  NUTRITION
}

enum ContentStatus {
  DRAFT
  REVIEW
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

enum FAQCategory {
  GENERAL
  PRICING
  FEATURES
  TECHNICAL
  COMPLIANCE
  INTEGRATION
  TRAINING
}

enum HelpCategory {
  GETTING_STARTED
  USER_GUIDE
  ADMIN_GUIDE
  INTEGRATION
  TROUBLESHOOTING
  BEST_PRACTICES
  API_DOCUMENTATION
}

enum DifficultyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum LeadSource {
  WEBSITE
  GOOGLE_ADS
  FACEBOOK_ADS
  LINKEDIN_ADS
  SEARCH_ORGANIC
  REFERRAL
  DIRECT
  EMAIL
  SOCIAL
  WEBINAR
  CONTENT
  DEMO
}

enum LeadFormType {
  CONTACT_FORM
  DEMO_REQUEST
  NEWSLETTER
  WHITEPAPER
  PRICING_INQUIRY
  CONSULTATION
  TRIAL_REQUEST
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  NURTURING
  DEMO_SCHEDULED
  PROPOSAL_SENT
  NEGOTIATION
  CONVERTED
  LOST
  UNQUALIFIED
}

enum PageType {
  LANDING_PAGE
  BLOG_POST
  CASE_STUDY
  FAQ_PAGE
  PRICING_PAGE
  FEATURES_PAGE
  CONTACT_PAGE
  ABOUT_PAGE
}

enum CampaignType {
  GOOGLE_ADS
  FACEBOOK_ADS
  LINKEDIN_ADS
  EMAIL_MARKETING
  CONTENT_MARKETING
  WEBINAR
  REFERRAL
  PARTNERSHIP
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum CampaignGoal {
  BRAND_AWARENESS
  LEAD_GENERATION
  DEMO_REQUESTS
  CUSTOMER_ACQUISITION
  CONTENT_ENGAGEMENT
  WEBINAR_REGISTRATION
}

enum ConfigValueType {
  STRING
  INTEGER
  FLOAT
  BOOLEAN
  JSON
}

enum ConfigCategory {
  GENERAL
  PAYMENT
  EMAIL
  NOTIFICATION
  SECURITY
  INTEGRATION
  FEATURE_FLAGS
}

enum ConfigAccessLevel {
  PUBLIC
  USER
  ADMIN
  SUPER_ADMIN
}

enum Environment {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

enum SubscriptionChangeStatus {
  PENDING
  APPROVED
  PROCESSING
  COMPLETED
  CANCELLED
  REJECTED
}

enum DunningProcessStatus {
  ACTIVE
  PAUSED
  RESOLVED
  FAILED
  ESCALATED
}

enum AuditLogCategory {
  SYSTEM
  USER_ACTION
  SECURITY
  BILLING
  SUBSCRIPTION
  DATA_CHANGE
  ADMIN_ACTION
}

enum NotificationTemplateCategory {
  SYSTEM
  PAYROLL
  BILLING
  MARKETING
  OPERATIONAL
  SECURITY
  WELCOME
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  READ
  DISMISSED
}

enum NotificationCategory {
  SYSTEM
  BILLING
  MARKETING
  OPERATIONAL
  SECURITY
  PERSONAL
}

enum EmailTemplateCategory {
  BILLING
  MARKETING
  SUPPORT
  SYSTEM
  ONBOARDING
  NOTIFICATION
}

enum EmailLogStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  BOUNCED
  OPENED
  CLICKED
}

enum NotificationDeliveryStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  CANCELLED
  RETRY
}

enum NotificationCampaignStatus {
  DRAFT
  SCHEDULED
  RUNNING
  COMPLETED
  CANCELLED
  PAUSED
}

enum NutritionProgramStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
  PLANNING
}

enum MenuPlanCategory {
  WEEKLY
  MONTHLY
  SEASONAL
  SPECIAL_EVENT
  RAMADAN
  EMERGENCY
}

enum OperationalReportStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  COMPLETED
  ARCHIVED
  REJECTED
}

enum TrainingCategory {
  TECHNICAL
  SOFT_SKILLS
  SAFETY
  COMPLIANCE
  LEADERSHIP
  NUTRITION
  FOOD_SAFETY
}

enum DisciplinaryActionStatus {
  OPEN
  UNDER_INVESTIGATION
  RESOLVED
  APPEALED
  CLOSED
  ESCALATED
}

enum TransactionCategory {
  FOOD_PROCUREMENT
  OPERATIONAL
  TRANSPORT
  UTILITY
  STAFF
  EQUIPMENT
  MAINTENANCE
  OTHER
}

enum DistributionScheduleStatus {
  PLANNED
  PREPARED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DELAYED
}

enum DistributionDeliveryStatus {
  ASSIGNED
  DEPARTED
  DELIVERED
  FAILED
  CANCELLED
  RETURNED
}
